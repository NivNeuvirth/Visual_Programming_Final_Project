"""Implementation of statechart statechart.
Generated by itemis CREATE code generator.
"""

import queue
import sys, os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))


class Statechart:
    """Implementation of the state machine Statechart.
    """

    class State:
        """ State Enum
        """
        (
            main_region_off,
            main_region_on,
            main_region_on_disaply_purchase_screen,
            main_region_on_disaply_purchase_screen_psmain_screen,
            main_region_on_disaply_purchase_screen_psitem_scanned,
            main_region_on_disaply_purchase_screen_psitem_weighed,
            main_region_on_disaply_purchase_screen_ps_please_place_item_on_scale_,
            main_region_on_disaply_purchase_screen_ps_18__approval_,
            main_region_on_disaply_welcome_screen,
            main_region_on_disaply_member_screen,
            main_region_on_disaply_help_screen,
            main_region_on_disaply_payment_screen,
            main_region_on_disaply_payment_screen_pay_s_please_select_payment_type_,
            main_region_on_disaply_payment_screen_pay_s_complete_payment_in_terminal_,
            main_region_on_disaply_payment_screen_pay_s_purchase_complete__thank_you_,
            main_region_on_disaply_payment_screen_pay_s_error__please_try_again_,
            main_region_on_disaply_payment_screen_pay_s_total_price_,
            main_region_on_disaply_payment_screen_pay_s_total_member_price_,
            main_region_on_disaply_items_screen,
            main_region_on_disaply_items_screen_items_screen_select_item,
            main_region_on_disaply_items_screen_items_screen_item_added,
            main_region_on_indicator_light_on,
            main_region_on_indicator_light_on_light_color_green,
            main_region_on_indicator_light_on_light_color_red,
            main_region_on_indicator_light_on_light_mode_steady,
            main_region_on_indicator_light_on_light_mode_blinking,
            main_region_on_magnetic_stripe_card_reader_standyby,
            main_region_on_magnetic_stripe_card_reader_read_card,
            main_region_on_scale_standby,
            main_region_on_scale_weigh,
            main_region_on_scanner_standby,
            main_region_on_scanner_scan,
            main_region_on_user_mode_guest,
            main_region_on_user_mode_member,
            main_region_on_payment_terminal_off,
            main_region_on_payment_terminal_on,
            main_region_on_payment_terminal_on_display_please_swipe_or_tap_card_,
            main_region_on_payment_terminal_on_display_approved_,
            main_region_on_payment_terminal_on_display_declined_,
            main_region_on_payment_terminal_on_display_processing,
            main_region_on_printer_off,
            main_region_on_printer_on,
            main_region_on_printer_printing,
            null_state
        ) = range(44)

    def __init__(self):
        """ Declares all necessary variables including list of states, histories etc.
        """

        self.ps = None
        self.weigh = None
        self.approve = None
        self.add_item = None
        self.back_pressed = None
        self.bank_approval = None
        self.barcode_detected = None
        self.confirm_pressed = None
        self.guest_mode = None
        self.guest_pressed = None
        self.help_pressed = None
        self.id_entered = None
        self.light_mb = None
        self.light_ms = None
        self.magnetic_card_swiped = None
        self.make_payment = None
        self.member_mode = None
        self.member_pressed = None
        self.pay_pressed = None
        self.power_pressed = None
        self.print_receipt = None
        self.printer_off = None
        self.printer_on = None
        self.papproved = None
        self.pdeclined = None
        self.select_item_pressed = None
        self.select_pay_type = None
        self.switch_green = None
        self.switch_red = None
        self.terminal_off = None
        self.terminal_on = None
        self.weight_detected = None

        self.in_event_queue = queue.Queue()
        # enumeration of all states:
        self.__State = Statechart.State
        self.__state_conf_vector_changed = None
        self.__state_vector = [None] * 9
        for __state_index in range(9):
            self.__state_vector[__state_index] = self.State.null_state

        # for timed statechart:
        self.timer_service = None
        self.__time_events = [None] * 16

        # initializations:
        # Default init sequence for statechart Statechart
        self.ps = True
        self.weigh = False
        self.approve = False
        self.__is_executing = False
        self.__state_conf_vector_position = None

    def is_active(self):
        """Checks if the state machine is active.
        """
        return self.__state_vector[0] is not self.__State.null_state or self.__state_vector[
            1] is not self.__State.null_state or self.__state_vector[2] is not self.__State.null_state or \
            self.__state_vector[3] is not self.__State.null_state or self.__state_vector[
                4] is not self.__State.null_state or self.__state_vector[5] is not self.__State.null_state or \
            self.__state_vector[6] is not self.__State.null_state or self.__state_vector[
                7] is not self.__State.null_state or self.__state_vector[8] is not self.__State.null_state

    def is_final(self):
        """Checks if the statemachine is final.
        Always returns 'false' since this state machine can never become final.
        """
        return False

    def is_state_active(self, state):
        """Checks if the state is currently active.
        """
        s = state
        if s == self.__State.main_region_off:
            return self.__state_vector[0] == self.__State.main_region_off
        if s == self.__State.main_region_on:
            return (self.__state_vector[0] >= self.__State.main_region_on) \
                and (self.__state_vector[0] <= self.__State.main_region_on_printer_printing)
        if s == self.__State.main_region_on_disaply_purchase_screen:
            return (self.__state_vector[0] >= self.__State.main_region_on_disaply_purchase_screen) \
                and (self.__state_vector[0] <= self.__State.main_region_on_disaply_purchase_screen_ps_18__approval_)
        if s == self.__State.main_region_on_disaply_purchase_screen_psmain_screen:
            return self.__state_vector[0] == self.__State.main_region_on_disaply_purchase_screen_psmain_screen
        if s == self.__State.main_region_on_disaply_purchase_screen_psitem_scanned:
            return self.__state_vector[0] == self.__State.main_region_on_disaply_purchase_screen_psitem_scanned
        if s == self.__State.main_region_on_disaply_purchase_screen_psitem_weighed:
            return self.__state_vector[0] == self.__State.main_region_on_disaply_purchase_screen_psitem_weighed
        if s == self.__State.main_region_on_disaply_purchase_screen_ps_please_place_item_on_scale_:
            return self.__state_vector[
                0] == self.__State.main_region_on_disaply_purchase_screen_ps_please_place_item_on_scale_
        if s == self.__State.main_region_on_disaply_purchase_screen_ps_18__approval_:
            return self.__state_vector[0] == self.__State.main_region_on_disaply_purchase_screen_ps_18__approval_
        if s == self.__State.main_region_on_disaply_welcome_screen:
            return self.__state_vector[0] == self.__State.main_region_on_disaply_welcome_screen
        if s == self.__State.main_region_on_disaply_member_screen:
            return self.__state_vector[0] == self.__State.main_region_on_disaply_member_screen
        if s == self.__State.main_region_on_disaply_help_screen:
            return self.__state_vector[0] == self.__State.main_region_on_disaply_help_screen
        if s == self.__State.main_region_on_disaply_payment_screen:
            return (self.__state_vector[0] >= self.__State.main_region_on_disaply_payment_screen) \
                and (self.__state_vector[
                         0] <= self.__State.main_region_on_disaply_payment_screen_pay_s_total_member_price_)
        if s == self.__State.main_region_on_disaply_payment_screen_pay_s_please_select_payment_type_:
            return self.__state_vector[
                0] == self.__State.main_region_on_disaply_payment_screen_pay_s_please_select_payment_type_
        if s == self.__State.main_region_on_disaply_payment_screen_pay_s_complete_payment_in_terminal_:
            return self.__state_vector[
                0] == self.__State.main_region_on_disaply_payment_screen_pay_s_complete_payment_in_terminal_
        if s == self.__State.main_region_on_disaply_payment_screen_pay_s_purchase_complete__thank_you_:
            return self.__state_vector[
                0] == self.__State.main_region_on_disaply_payment_screen_pay_s_purchase_complete__thank_you_
        if s == self.__State.main_region_on_disaply_payment_screen_pay_s_error__please_try_again_:
            return self.__state_vector[
                0] == self.__State.main_region_on_disaply_payment_screen_pay_s_error__please_try_again_
        if s == self.__State.main_region_on_disaply_payment_screen_pay_s_total_price_:
            return self.__state_vector[0] == self.__State.main_region_on_disaply_payment_screen_pay_s_total_price_
        if s == self.__State.main_region_on_disaply_payment_screen_pay_s_total_member_price_:
            return self.__state_vector[
                0] == self.__State.main_region_on_disaply_payment_screen_pay_s_total_member_price_
        if s == self.__State.main_region_on_disaply_items_screen:
            return (self.__state_vector[0] >= self.__State.main_region_on_disaply_items_screen) \
                and (self.__state_vector[0] <= self.__State.main_region_on_disaply_items_screen_items_screen_item_added)
        if s == self.__State.main_region_on_disaply_items_screen_items_screen_select_item:
            return self.__state_vector[0] == self.__State.main_region_on_disaply_items_screen_items_screen_select_item
        if s == self.__State.main_region_on_disaply_items_screen_items_screen_item_added:
            return self.__state_vector[0] == self.__State.main_region_on_disaply_items_screen_items_screen_item_added
        if s == self.__State.main_region_on_indicator_light_on:
            return (self.__state_vector[1] >= self.__State.main_region_on_indicator_light_on) \
                and (self.__state_vector[1] <= self.__State.main_region_on_indicator_light_on_light_mode_blinking)
        if s == self.__State.main_region_on_indicator_light_on_light_color_green:
            return self.__state_vector[1] == self.__State.main_region_on_indicator_light_on_light_color_green
        if s == self.__State.main_region_on_indicator_light_on_light_color_red:
            return self.__state_vector[1] == self.__State.main_region_on_indicator_light_on_light_color_red
        if s == self.__State.main_region_on_indicator_light_on_light_mode_steady:
            return self.__state_vector[2] == self.__State.main_region_on_indicator_light_on_light_mode_steady
        if s == self.__State.main_region_on_indicator_light_on_light_mode_blinking:
            return self.__state_vector[2] == self.__State.main_region_on_indicator_light_on_light_mode_blinking
        if s == self.__State.main_region_on_magnetic_stripe_card_reader_standyby:
            return self.__state_vector[3] == self.__State.main_region_on_magnetic_stripe_card_reader_standyby
        if s == self.__State.main_region_on_magnetic_stripe_card_reader_read_card:
            return self.__state_vector[3] == self.__State.main_region_on_magnetic_stripe_card_reader_read_card
        if s == self.__State.main_region_on_scale_standby:
            return self.__state_vector[4] == self.__State.main_region_on_scale_standby
        if s == self.__State.main_region_on_scale_weigh:
            return self.__state_vector[4] == self.__State.main_region_on_scale_weigh
        if s == self.__State.main_region_on_scanner_standby:
            return self.__state_vector[5] == self.__State.main_region_on_scanner_standby
        if s == self.__State.main_region_on_scanner_scan:
            return self.__state_vector[5] == self.__State.main_region_on_scanner_scan
        if s == self.__State.main_region_on_user_mode_guest:
            return self.__state_vector[6] == self.__State.main_region_on_user_mode_guest
        if s == self.__State.main_region_on_user_mode_member:
            return self.__state_vector[6] == self.__State.main_region_on_user_mode_member
        if s == self.__State.main_region_on_payment_terminal_off:
            return self.__state_vector[7] == self.__State.main_region_on_payment_terminal_off
        if s == self.__State.main_region_on_payment_terminal_on:
            return (self.__state_vector[7] >= self.__State.main_region_on_payment_terminal_on) \
                and (self.__state_vector[7] <= self.__State.main_region_on_payment_terminal_on_display_processing)
        if s == self.__State.main_region_on_payment_terminal_on_display_please_swipe_or_tap_card_:
            return self.__state_vector[
                7] == self.__State.main_region_on_payment_terminal_on_display_please_swipe_or_tap_card_
        if s == self.__State.main_region_on_payment_terminal_on_display_approved_:
            return self.__state_vector[7] == self.__State.main_region_on_payment_terminal_on_display_approved_
        if s == self.__State.main_region_on_payment_terminal_on_display_declined_:
            return self.__state_vector[7] == self.__State.main_region_on_payment_terminal_on_display_declined_
        if s == self.__State.main_region_on_payment_terminal_on_display_processing:
            return self.__state_vector[7] == self.__State.main_region_on_payment_terminal_on_display_processing
        if s == self.__State.main_region_on_printer_off:
            return self.__state_vector[8] == self.__State.main_region_on_printer_off
        if s == self.__State.main_region_on_printer_on:
            return self.__state_vector[8] == self.__State.main_region_on_printer_on
        if s == self.__State.main_region_on_printer_printing:
            return self.__state_vector[8] == self.__State.main_region_on_printer_printing
        return False

    def time_elapsed(self, event_id):
        """Add time events to in event queue
        """
        if event_id in range(16):
            self.in_event_queue.put(lambda: self.raise_time_event(event_id))
            self.run_cycle()

    def raise_time_event(self, event_id):
        """Raise timed events using the event_id.
        """
        self.__time_events[event_id] = True

    def __execute_queued_event(self, func):
        func()

    def __get_next_event(self):
        if not self.in_event_queue.empty():
            return self.in_event_queue.get()
        return None

    def raise_add_item(self):
        """Raise method for event add_item.
        """
        self.in_event_queue.put(self.__raise_add_item_call)
        self.run_cycle()

    def __raise_add_item_call(self):
        """Raise callback for event add_item.
        """
        self.add_item = True

    def raise_back_pressed(self):
        """Raise method for event back_pressed.
        """
        self.in_event_queue.put(self.__raise_back_pressed_call)
        self.run_cycle()

    def __raise_back_pressed_call(self):
        """Raise callback for event back_pressed.
        """
        self.back_pressed = True

    def raise_bank_approval(self):
        """Raise method for event bank_approval.
        """
        self.in_event_queue.put(self.__raise_bank_approval_call)
        self.run_cycle()

    def __raise_bank_approval_call(self):
        """Raise callback for event bank_approval.
        """
        self.bank_approval = True

    def raise_barcode_detected(self):
        """Raise method for event barcode_detected.
        """
        self.in_event_queue.put(self.__raise_barcode_detected_call)
        self.run_cycle()

    def __raise_barcode_detected_call(self):
        """Raise callback for event barcode_detected.
        """
        self.barcode_detected = True

    def raise_confirm_pressed(self):
        """Raise method for event confirm_pressed.
        """
        self.in_event_queue.put(self.__raise_confirm_pressed_call)
        self.run_cycle()

    def __raise_confirm_pressed_call(self):
        """Raise callback for event confirm_pressed.
        """
        self.confirm_pressed = True

    def raise_guest_mode(self):
        """Raise method for event guest_mode.
        """
        self.in_event_queue.put(self.__raise_guest_mode_call)
        self.run_cycle()

    def __raise_guest_mode_call(self):
        """Raise callback for event guest_mode.
        """
        self.guest_mode = True

    def raise_guest_pressed(self):
        """Raise method for event guest_pressed.
        """
        self.in_event_queue.put(self.__raise_guest_pressed_call)
        self.run_cycle()

    def __raise_guest_pressed_call(self):
        """Raise callback for event guest_pressed.
        """
        self.guest_pressed = True

    def raise_help_pressed(self):
        """Raise method for event help_pressed.
        """
        self.in_event_queue.put(self.__raise_help_pressed_call)
        self.run_cycle()

    def __raise_help_pressed_call(self):
        """Raise callback for event help_pressed.
        """
        self.help_pressed = True

    def raise_id_entered(self):
        """Raise method for event id_entered.
        """
        self.in_event_queue.put(self.__raise_id_entered_call)
        self.run_cycle()

    def __raise_id_entered_call(self):
        """Raise callback for event id_entered.
        """
        self.id_entered = True

    def raise_light_mb(self):
        """Raise method for event light_mb.
        """
        self.in_event_queue.put(self.__raise_light_mb_call)
        self.run_cycle()

    def __raise_light_mb_call(self):
        """Raise callback for event light_mb.
        """
        self.light_mb = True

    def raise_light_ms(self):
        """Raise method for event light_ms.
        """
        self.in_event_queue.put(self.__raise_light_ms_call)
        self.run_cycle()

    def __raise_light_ms_call(self):
        """Raise callback for event light_ms.
        """
        self.light_ms = True

    def raise_magnetic_card_swiped(self):
        """Raise method for event magnetic_card_swiped.
        """
        self.in_event_queue.put(self.__raise_magnetic_card_swiped_call)
        self.run_cycle()

    def __raise_magnetic_card_swiped_call(self):
        """Raise callback for event magnetic_card_swiped.
        """
        self.magnetic_card_swiped = True

    def raise_make_payment(self):
        """Raise method for event make_payment.
        """
        self.in_event_queue.put(self.__raise_make_payment_call)
        self.run_cycle()

    def __raise_make_payment_call(self):
        """Raise callback for event make_payment.
        """
        self.make_payment = True

    def raise_member_mode(self):
        """Raise method for event member_mode.
        """
        self.in_event_queue.put(self.__raise_member_mode_call)
        self.run_cycle()

    def __raise_member_mode_call(self):
        """Raise callback for event member_mode.
        """
        self.member_mode = True

    def raise_member_pressed(self):
        """Raise method for event member_pressed.
        """
        self.in_event_queue.put(self.__raise_member_pressed_call)
        self.run_cycle()

    def __raise_member_pressed_call(self):
        """Raise callback for event member_pressed.
        """
        self.member_pressed = True

    def raise_pay_pressed(self):
        """Raise method for event pay_pressed.
        """
        self.in_event_queue.put(self.__raise_pay_pressed_call)
        self.run_cycle()

    def __raise_pay_pressed_call(self):
        """Raise callback for event pay_pressed.
        """
        self.pay_pressed = True

    def raise_power_pressed(self):
        """Raise method for event power_pressed.
        """
        self.in_event_queue.put(self.__raise_power_pressed_call)
        self.run_cycle()

    def __raise_power_pressed_call(self):
        """Raise callback for event power_pressed.
        """
        self.power_pressed = True

    def raise_print_receipt(self):
        """Raise method for event print_receipt.
        """
        self.in_event_queue.put(self.__raise_print_receipt_call)
        self.run_cycle()

    def __raise_print_receipt_call(self):
        """Raise callback for event print_receipt.
        """
        self.print_receipt = True

    def raise_printer_off(self):
        """Raise method for event printer_off.
        """
        self.in_event_queue.put(self.__raise_printer_off_call)
        self.run_cycle()

    def __raise_printer_off_call(self):
        """Raise callback for event printer_off.
        """
        self.printer_off = True

    def raise_printer_on(self):
        """Raise method for event printer_on.
        """
        self.in_event_queue.put(self.__raise_printer_on_call)
        self.run_cycle()

    def __raise_printer_on_call(self):
        """Raise callback for event printer_on.
        """
        self.printer_on = True

    def raise_papproved(self):
        """Raise method for event papproved.
        """
        self.in_event_queue.put(self.__raise_papproved_call)
        self.run_cycle()

    def __raise_papproved_call(self):
        """Raise callback for event papproved.
        """
        self.papproved = True

    def raise_pdeclined(self):
        """Raise method for event pdeclined.
        """
        self.in_event_queue.put(self.__raise_pdeclined_call)
        self.run_cycle()

    def __raise_pdeclined_call(self):
        """Raise callback for event pdeclined.
        """
        self.pdeclined = True

    def raise_select_item_pressed(self):
        """Raise method for event select_item_pressed.
        """
        self.in_event_queue.put(self.__raise_select_item_pressed_call)
        self.run_cycle()

    def __raise_select_item_pressed_call(self):
        """Raise callback for event select_item_pressed.
        """
        self.select_item_pressed = True

    def raise_select_pay_type(self):
        """Raise method for event select_pay_type.
        """
        self.in_event_queue.put(self.__raise_select_pay_type_call)
        self.run_cycle()

    def __raise_select_pay_type_call(self):
        """Raise callback for event select_pay_type.
        """
        self.select_pay_type = True

    def raise_switch_green(self):
        """Raise method for event switch_green.
        """
        self.in_event_queue.put(self.__raise_switch_green_call)
        self.run_cycle()

    def __raise_switch_green_call(self):
        """Raise callback for event switch_green.
        """
        self.switch_green = True

    def raise_switch_red(self):
        """Raise method for event switch_red.
        """
        self.in_event_queue.put(self.__raise_switch_red_call)
        self.run_cycle()

    def __raise_switch_red_call(self):
        """Raise callback for event switch_red.
        """
        self.switch_red = True

    def raise_terminal_off(self):
        """Raise method for event terminal_off.
        """
        self.in_event_queue.put(self.__raise_terminal_off_call)
        self.run_cycle()

    def __raise_terminal_off_call(self):
        """Raise callback for event terminal_off.
        """
        self.terminal_off = True

    def raise_terminal_on(self):
        """Raise method for event terminal_on.
        """
        self.in_event_queue.put(self.__raise_terminal_on_call)
        self.run_cycle()

    def __raise_terminal_on_call(self):
        """Raise callback for event terminal_on.
        """
        self.terminal_on = True

    def raise_weight_detected(self):
        """Raise method for event weight_detected.
        """
        self.in_event_queue.put(self.__raise_weight_detected_call)
        self.run_cycle()

    def __raise_weight_detected_call(self):
        """Raise callback for event weight_detected.
        """
        self.weight_detected = True

    def __entry_action_main_region_on_disaply_purchase_screen_ps_item_scanned(self):
        """Entry action for state 'item scanned'..
        """
        # Entry action for state 'item scanned'.
        self.timer_service.set_timer(self, 0, (1 * 1000), False)
        self.timer_service.set_timer(self, 1, (2 * 1000), False)
        self.timer_service.set_timer(self, 2, (1 * 1000), False)

    def __entry_action_main_region_on_disaply_purchase_screen_ps_item_weighed(self):
        """Entry action for state 'item weighed'..
        """
        # Entry action for state 'item weighed'.
        self.timer_service.set_timer(self, 3, (1 * 1000), False)

    def __entry_action_main_region_on_disaply_purchase_screen_ps__18__approval_(self):
        """Entry action for state '"18+ approval"'..
        """
        # Entry action for state '"18+ approval"'.
        self.timer_service.set_timer(self, 4, (2 * 1000), False)

    def __entry_action_main_region_on_disaply_payment_screen_pay_s__purchase_complete__thank_you_(self):
        """Entry action for state '"Purchase complete, Thank you"'..
        """
        # Entry action for state '"Purchase complete, Thank you"'.
        self.timer_service.set_timer(self, 5, (5 * 1000), False)

    def __entry_action_main_region_on_disaply_payment_screen_pay_s__error__please_try_again_(self):
        """Entry action for state '"Error, please try again"'..
        """
        # Entry action for state '"Error, please try again"'.
        self.timer_service.set_timer(self, 6, (3 * 1000), False)

    def __entry_action_main_region_on_disaply_payment_screen_pay_s__total_price_(self):
        """Entry action for state '"Total price"'..
        """
        # Entry action for state '"Total price"'.
        self.timer_service.set_timer(self, 7, 1, False)

    def __entry_action_main_region_on_disaply_items_screen_items_screen_item_added(self):
        """Entry action for state 'item added'..
        """
        # Entry action for state 'item added'.
        self.timer_service.set_timer(self, 8, (1 * 1000), False)
        self.timer_service.set_timer(self, 9, (1 * 1000), False)

    def __entry_action_main_region_on_magnetic_stripe_card_reader_read_card(self):
        """Entry action for state 'read card'..
        """
        # Entry action for state 'read card'.
        self.timer_service.set_timer(self, 10, (1 * 1000), False)

    def __entry_action_main_region_on_scale_weigh(self):
        """Entry action for state 'weigh'..
        """
        # Entry action for state 'weigh'.
        self.timer_service.set_timer(self, 11, (1 * 1000), False)

    def __entry_action_main_region_on_scanner_scan(self):
        """Entry action for state 'scan'..
        """
        # Entry action for state 'scan'.
        self.timer_service.set_timer(self, 12, (1 * 1000), False)

    def __entry_action_main_region_on_payment_terminal_on_display__declined_(self):
        """Entry action for state '"Declined"'..
        """
        # Entry action for state '"Declined"'.
        self.timer_service.set_timer(self, 13, (2 * 1000), False)

    def __entry_action_main_region_on_payment_terminal_on_display_processing(self):
        """Entry action for state 'processing'..
        """
        # Entry action for state 'processing'.
        self.timer_service.set_timer(self, 14, (15 * 1000), False)

    def __entry_action_main_region_on_printer_printing(self):
        """Entry action for state 'printing'..
        """
        # Entry action for state 'printing'.
        self.timer_service.set_timer(self, 15, (4 * 1000), False)

    def __exit_action_main_region_on_disaply_purchase_screen_ps_item_scanned(self):
        """Exit action for state 'item scanned'..
        """
        # Exit action for state 'item scanned'.
        self.timer_service.unset_timer(self, 0)
        self.timer_service.unset_timer(self, 1)
        self.timer_service.unset_timer(self, 2)

    def __exit_action_main_region_on_disaply_purchase_screen_ps_item_weighed(self):
        """Exit action for state 'item weighed'..
        """
        # Exit action for state 'item weighed'.
        self.timer_service.unset_timer(self, 3)

    def __exit_action_main_region_on_disaply_purchase_screen_ps__18__approval_(self):
        """Exit action for state '"18+ approval"'..
        """
        # Exit action for state '"18+ approval"'.
        self.timer_service.unset_timer(self, 4)

    def __exit_action_main_region_on_disaply_payment_screen_pay_s__purchase_complete__thank_you_(self):
        """Exit action for state '"Purchase complete, Thank you"'..
        """
        # Exit action for state '"Purchase complete, Thank you"'.
        self.timer_service.unset_timer(self, 5)

    def __exit_action_main_region_on_disaply_payment_screen_pay_s__error__please_try_again_(self):
        """Exit action for state '"Error, please try again"'..
        """
        # Exit action for state '"Error, please try again"'.
        self.timer_service.unset_timer(self, 6)

    def __exit_action_main_region_on_disaply_payment_screen_pay_s__total_price_(self):
        """Exit action for state '"Total price"'..
        """
        # Exit action for state '"Total price"'.
        self.timer_service.unset_timer(self, 7)

    def __exit_action_main_region_on_disaply_items_screen_items_screen_item_added(self):
        """Exit action for state 'item added'..
        """
        # Exit action for state 'item added'.
        self.timer_service.unset_timer(self, 8)
        self.timer_service.unset_timer(self, 9)

    def __exit_action_main_region_on_magnetic_stripe_card_reader_read_card(self):
        """Exit action for state 'read card'..
        """
        # Exit action for state 'read card'.
        self.timer_service.unset_timer(self, 10)

    def __exit_action_main_region_on_scale_weigh(self):
        """Exit action for state 'weigh'..
        """
        # Exit action for state 'weigh'.
        self.timer_service.unset_timer(self, 11)

    def __exit_action_main_region_on_scanner_scan(self):
        """Exit action for state 'scan'..
        """
        # Exit action for state 'scan'.
        self.timer_service.unset_timer(self, 12)

    def __exit_action_main_region_on_payment_terminal_on_display__declined_(self):
        """Exit action for state '"Declined"'..
        """
        # Exit action for state '"Declined"'.
        self.timer_service.unset_timer(self, 13)

    def __exit_action_main_region_on_payment_terminal_on_display_processing(self):
        """Exit action for state 'processing'..
        """
        # Exit action for state 'processing'.
        self.timer_service.unset_timer(self, 14)

    def __exit_action_main_region_on_printer_printing(self):
        """Exit action for state 'printing'..
        """
        # Exit action for state 'printing'.
        self.timer_service.unset_timer(self, 15)

    def __enter_sequence_main_region_off_default(self):
        """'default' enter sequence for state Off.
        """
        # 'default' enter sequence for state Off
        self.__state_vector[0] = self.State.main_region_off
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_default(self):
        """'default' enter sequence for state On.
        """
        # 'default' enter sequence for state On
        self.__enter_sequence_main_region_on_disaply_default()
        self.__enter_sequence_main_region_on_indicator_light_default()
        self.__enter_sequence_main_region_on_magnetic_stripe_card_reader_default()
        self.__enter_sequence_main_region_on_scale_default()
        self.__enter_sequence_main_region_on_scanner_default()
        self.__enter_sequence_main_region_on_user_mode_default()
        self.__enter_sequence_main_region_on_payment_terminal_default()
        self.__enter_sequence_main_region_on_printer_default()

    def __enter_sequence_main_region_on_disaply_purchase_screen_default(self):
        """'default' enter sequence for state purchase screen.
        """
        # 'default' enter sequence for state purchase screen
        self.__enter_sequence_main_region_on_disaply_purchase_screen_ps_default()

    def __enter_sequence_main_region_on_disaply_purchase_screen_ps_main_screen_default(self):
        """'default' enter sequence for state main screen.
        """
        # 'default' enter sequence for state main screen
        self.__state_vector[0] = self.State.main_region_on_disaply_purchase_screen_psmain_screen
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_disaply_purchase_screen_ps_item_scanned_default(self):
        """'default' enter sequence for state item scanned.
        """
        # 'default' enter sequence for state item scanned
        self.__entry_action_main_region_on_disaply_purchase_screen_ps_item_scanned()
        self.__state_vector[0] = self.State.main_region_on_disaply_purchase_screen_psitem_scanned
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_disaply_purchase_screen_ps_item_weighed_default(self):
        """'default' enter sequence for state item weighed.
        """
        # 'default' enter sequence for state item weighed
        self.__entry_action_main_region_on_disaply_purchase_screen_ps_item_weighed()
        self.__state_vector[0] = self.State.main_region_on_disaply_purchase_screen_psitem_weighed
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_disaply_purchase_screen_ps__please_place_item_on_scale__default(self):
        """'default' enter sequence for state "Please place item on scale".
        """
        # 'default' enter sequence for state "Please place item on scale"
        self.__state_vector[0] = self.State.main_region_on_disaply_purchase_screen_ps_please_place_item_on_scale_
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_disaply_purchase_screen_ps__18__approval__default(self):
        """'default' enter sequence for state "18+ approval".
        """
        # 'default' enter sequence for state "18+ approval"
        self.__entry_action_main_region_on_disaply_purchase_screen_ps__18__approval_()
        self.__state_vector[0] = self.State.main_region_on_disaply_purchase_screen_ps_18__approval_
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_disaply_welcome_screen_default(self):
        """'default' enter sequence for state welcome screen.
        """
        # 'default' enter sequence for state welcome screen
        self.__state_vector[0] = self.State.main_region_on_disaply_welcome_screen
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_disaply_member_screen_default(self):
        """'default' enter sequence for state member screen.
        """
        # 'default' enter sequence for state member screen
        self.__state_vector[0] = self.State.main_region_on_disaply_member_screen
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_disaply_help_screen_default(self):
        """'default' enter sequence for state help screen.
        """
        # 'default' enter sequence for state help screen
        self.__state_vector[0] = self.State.main_region_on_disaply_help_screen
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_disaply_payment_screen_default(self):
        """'default' enter sequence for state payment screen.
        """
        # 'default' enter sequence for state payment screen
        self.__enter_sequence_main_region_on_disaply_payment_screen_pay_s_default()

    def __enter_sequence_main_region_on_disaply_payment_screen_pay_s__please_select_payment_type__default(self):
        """'default' enter sequence for state "please select payment type".
        """
        # 'default' enter sequence for state "please select payment type"
        self.__state_vector[0] = self.State.main_region_on_disaply_payment_screen_pay_s_please_select_payment_type_
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_disaply_payment_screen_pay_s__complete_payment_in_terminal__default(self):
        """'default' enter sequence for state "complete payment in terminal".
        """
        # 'default' enter sequence for state "complete payment in terminal"
        self.__state_vector[0] = self.State.main_region_on_disaply_payment_screen_pay_s_complete_payment_in_terminal_
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_disaply_payment_screen_pay_s__purchase_complete__thank_you__default(self):
        """'default' enter sequence for state "Purchase complete, Thank you".
        """
        # 'default' enter sequence for state "Purchase complete, Thank you"
        self.__entry_action_main_region_on_disaply_payment_screen_pay_s__purchase_complete__thank_you_()
        self.__state_vector[0] = self.State.main_region_on_disaply_payment_screen_pay_s_purchase_complete__thank_you_
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_disaply_payment_screen_pay_s__error__please_try_again__default(self):
        """'default' enter sequence for state "Error, please try again".
        """
        # 'default' enter sequence for state "Error, please try again"
        self.__entry_action_main_region_on_disaply_payment_screen_pay_s__error__please_try_again_()
        self.__state_vector[0] = self.State.main_region_on_disaply_payment_screen_pay_s_error__please_try_again_
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_disaply_payment_screen_pay_s__total_price__default(self):
        """'default' enter sequence for state "Total price".
        """
        # 'default' enter sequence for state "Total price"
        self.__entry_action_main_region_on_disaply_payment_screen_pay_s__total_price_()
        self.__state_vector[0] = self.State.main_region_on_disaply_payment_screen_pay_s_total_price_
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_disaply_payment_screen_pay_s__total_member_price__default(self):
        """'default' enter sequence for state "Total member price".
        """
        # 'default' enter sequence for state "Total member price"
        self.__state_vector[0] = self.State.main_region_on_disaply_payment_screen_pay_s_total_member_price_
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_disaply_items_screen_default(self):
        """'default' enter sequence for state items screen.
        """
        # 'default' enter sequence for state items screen
        self.__enter_sequence_main_region_on_disaply_items_screen_items_screen_default()

    def __enter_sequence_main_region_on_disaply_items_screen_items_screen_select_item_default(self):
        """'default' enter sequence for state select item.
        """
        # 'default' enter sequence for state select item
        self.__state_vector[0] = self.State.main_region_on_disaply_items_screen_items_screen_select_item
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_disaply_items_screen_items_screen_item_added_default(self):
        """'default' enter sequence for state item added.
        """
        # 'default' enter sequence for state item added
        self.__entry_action_main_region_on_disaply_items_screen_items_screen_item_added()
        self.__state_vector[0] = self.State.main_region_on_disaply_items_screen_items_screen_item_added
        self.__state_conf_vector_position = 0
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_indicator_light_on_default(self):
        """'default' enter sequence for state on.
        """
        # 'default' enter sequence for state on
        self.__enter_sequence_main_region_on_indicator_light_on_light_color_default()
        self.__enter_sequence_main_region_on_indicator_light_on_light_mode_default()

    def __enter_sequence_main_region_on_indicator_light_on_light_color_green_default(self):
        """'default' enter sequence for state Green.
        """
        # 'default' enter sequence for state Green
        self.__state_vector[1] = self.State.main_region_on_indicator_light_on_light_color_green
        self.__state_conf_vector_position = 1
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_indicator_light_on_light_color_red_default(self):
        """'default' enter sequence for state Red.
        """
        # 'default' enter sequence for state Red
        self.__state_vector[1] = self.State.main_region_on_indicator_light_on_light_color_red
        self.__state_conf_vector_position = 1
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_indicator_light_on_light_mode_steady_default(self):
        """'default' enter sequence for state steady.
        """
        # 'default' enter sequence for state steady
        self.__state_vector[2] = self.State.main_region_on_indicator_light_on_light_mode_steady
        self.__state_conf_vector_position = 2
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_indicator_light_on_light_mode_blinking_default(self):
        """'default' enter sequence for state blinking.
        """
        # 'default' enter sequence for state blinking
        self.__state_vector[2] = self.State.main_region_on_indicator_light_on_light_mode_blinking
        self.__state_conf_vector_position = 2
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_magnetic_stripe_card_reader_standyby_default(self):
        """'default' enter sequence for state standyby.
        """
        # 'default' enter sequence for state standyby
        self.__state_vector[3] = self.State.main_region_on_magnetic_stripe_card_reader_standyby
        self.__state_conf_vector_position = 3
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_magnetic_stripe_card_reader_read_card_default(self):
        """'default' enter sequence for state read card.
        """
        # 'default' enter sequence for state read card
        self.__entry_action_main_region_on_magnetic_stripe_card_reader_read_card()
        self.__state_vector[3] = self.State.main_region_on_magnetic_stripe_card_reader_read_card
        self.__state_conf_vector_position = 3
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_scale_standby_default(self):
        """'default' enter sequence for state standby.
        """
        # 'default' enter sequence for state standby
        self.__state_vector[4] = self.State.main_region_on_scale_standby
        self.__state_conf_vector_position = 4
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_scale_weigh_default(self):
        """'default' enter sequence for state weigh.
        """
        # 'default' enter sequence for state weigh
        self.__entry_action_main_region_on_scale_weigh()
        self.__state_vector[4] = self.State.main_region_on_scale_weigh
        self.__state_conf_vector_position = 4
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_scanner_standby_default(self):
        """'default' enter sequence for state standby.
        """
        # 'default' enter sequence for state standby
        self.__state_vector[5] = self.State.main_region_on_scanner_standby
        self.__state_conf_vector_position = 5
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_scanner_scan_default(self):
        """'default' enter sequence for state scan.
        """
        # 'default' enter sequence for state scan
        self.__entry_action_main_region_on_scanner_scan()
        self.__state_vector[5] = self.State.main_region_on_scanner_scan
        self.__state_conf_vector_position = 5
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_user_mode_guest_default(self):
        """'default' enter sequence for state guest.
        """
        # 'default' enter sequence for state guest
        self.__state_vector[6] = self.State.main_region_on_user_mode_guest
        self.__state_conf_vector_position = 6
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_user_mode_member_default(self):
        """'default' enter sequence for state member.
        """
        # 'default' enter sequence for state member
        self.__state_vector[6] = self.State.main_region_on_user_mode_member
        self.__state_conf_vector_position = 6
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_payment_terminal_off_default(self):
        """'default' enter sequence for state off.
        """
        # 'default' enter sequence for state off
        self.__state_vector[7] = self.State.main_region_on_payment_terminal_off
        self.__state_conf_vector_position = 7
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_payment_terminal_on_default(self):
        """'default' enter sequence for state on.
        """
        # 'default' enter sequence for state on
        self.__enter_sequence_main_region_on_payment_terminal_on_display_default()

    def __enter_sequence_main_region_on_payment_terminal_on_display__please_swipe_or_tap_card__default(self):
        """'default' enter sequence for state "please swipe or tap card".
        """
        # 'default' enter sequence for state "please swipe or tap card"
        self.__state_vector[7] = self.State.main_region_on_payment_terminal_on_display_please_swipe_or_tap_card_
        self.__state_conf_vector_position = 7
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_payment_terminal_on_display__approved__default(self):
        """'default' enter sequence for state "Approved".
        """
        # 'default' enter sequence for state "Approved"
        self.__state_vector[7] = self.State.main_region_on_payment_terminal_on_display_approved_
        self.__state_conf_vector_position = 7
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_payment_terminal_on_display__declined__default(self):
        """'default' enter sequence for state "Declined".
        """
        # 'default' enter sequence for state "Declined"
        self.__entry_action_main_region_on_payment_terminal_on_display__declined_()
        self.__state_vector[7] = self.State.main_region_on_payment_terminal_on_display_declined_
        self.__state_conf_vector_position = 7
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_payment_terminal_on_display_processing_default(self):
        """'default' enter sequence for state processing.
        """
        # 'default' enter sequence for state processing
        self.__entry_action_main_region_on_payment_terminal_on_display_processing()
        self.__state_vector[7] = self.State.main_region_on_payment_terminal_on_display_processing
        self.__state_conf_vector_position = 7
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_printer_off_default(self):
        """'default' enter sequence for state off.
        """
        # 'default' enter sequence for state off
        self.__state_vector[8] = self.State.main_region_on_printer_off
        self.__state_conf_vector_position = 8
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_printer_on_default(self):
        """'default' enter sequence for state on.
        """
        # 'default' enter sequence for state on
        self.__state_vector[8] = self.State.main_region_on_printer_on
        self.__state_conf_vector_position = 8
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_on_printer_printing_default(self):
        """'default' enter sequence for state printing.
        """
        # 'default' enter sequence for state printing
        self.__entry_action_main_region_on_printer_printing()
        self.__state_vector[8] = self.State.main_region_on_printer_printing
        self.__state_conf_vector_position = 8
        self.__state_conf_vector_changed = True

    def __enter_sequence_main_region_default(self):
        """'default' enter sequence for region main region.
        """
        # 'default' enter sequence for region main region
        self.__react_main_region__entry_default()

    def __enter_sequence_main_region_on_disaply_default(self):
        """'default' enter sequence for region Disaply.
        """
        # 'default' enter sequence for region Disaply
        self.__react_main_region_on_disaply__entry_default()

    def __enter_sequence_main_region_on_disaply_purchase_screen_ps_default(self):
        """'default' enter sequence for region PS.
        """
        # 'default' enter sequence for region PS
        self.__react_main_region_on_disaply_purchase_screen_ps__entry_default()

    def __enter_sequence_main_region_on_disaply_payment_screen_pay_s_default(self):
        """'default' enter sequence for region PayS.
        """
        # 'default' enter sequence for region PayS
        self.__react_main_region_on_disaply_payment_screen_pay_s__entry_default()

    def __enter_sequence_main_region_on_disaply_items_screen_items_screen_default(self):
        """'default' enter sequence for region items screen.
        """
        # 'default' enter sequence for region items screen
        self.__react_main_region_on_disaply_items_screen_items_screen__entry_default()

    def __enter_sequence_main_region_on_indicator_light_default(self):
        """'default' enter sequence for region Indicator light.
        """
        # 'default' enter sequence for region Indicator light
        self.__react_main_region_on_indicator_light__entry_default()

    def __enter_sequence_main_region_on_indicator_light_on_light_color_default(self):
        """'default' enter sequence for region light color.
        """
        # 'default' enter sequence for region light color
        self.__react_main_region_on_indicator_light_on_light_color__entry_default()

    def __enter_sequence_main_region_on_indicator_light_on_light_mode_default(self):
        """'default' enter sequence for region light mode.
        """
        # 'default' enter sequence for region light mode
        self.__react_main_region_on_indicator_light_on_light_mode__entry_default()

    def __enter_sequence_main_region_on_magnetic_stripe_card_reader_default(self):
        """'default' enter sequence for region Magnetic stripe card reader.
        """
        # 'default' enter sequence for region Magnetic stripe card reader
        self.__react_main_region_on_magnetic_stripe_card_reader__entry_default()

    def __enter_sequence_main_region_on_scale_default(self):
        """'default' enter sequence for region Scale.
        """
        # 'default' enter sequence for region Scale
        self.__react_main_region_on_scale__entry_default()

    def __enter_sequence_main_region_on_scanner_default(self):
        """'default' enter sequence for region Scanner.
        """
        # 'default' enter sequence for region Scanner
        self.__react_main_region_on_scanner__entry_default()

    def __enter_sequence_main_region_on_user_mode_default(self):
        """'default' enter sequence for region User Mode.
        """
        # 'default' enter sequence for region User Mode
        self.__react_main_region_on_user_mode__entry_default()

    def __enter_sequence_main_region_on_payment_terminal_default(self):
        """'default' enter sequence for region payment terminal.
        """
        # 'default' enter sequence for region payment terminal
        self.__react_main_region_on_payment_terminal__entry_default()

    def __enter_sequence_main_region_on_payment_terminal_on_display_default(self):
        """'default' enter sequence for region display.
        """
        # 'default' enter sequence for region display
        self.__react_main_region_on_payment_terminal_on_display__entry_default()

    def __enter_sequence_main_region_on_printer_default(self):
        """'default' enter sequence for region Printer.
        """
        # 'default' enter sequence for region Printer
        self.__react_main_region_on_printer__entry_default()

    def __exit_sequence_main_region_off(self):
        """Default exit sequence for state Off.
        """
        # Default exit sequence for state Off
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0

    def __exit_sequence_main_region_on(self):
        """Default exit sequence for state On.
        """
        # Default exit sequence for state On
        self.__exit_sequence_main_region_on_disaply()
        self.__exit_sequence_main_region_on_indicator_light()
        self.__exit_sequence_main_region_on_magnetic_stripe_card_reader()
        self.__exit_sequence_main_region_on_scale()
        self.__exit_sequence_main_region_on_scanner()
        self.__exit_sequence_main_region_on_user_mode()
        self.__exit_sequence_main_region_on_payment_terminal()
        self.__exit_sequence_main_region_on_printer()

    def __exit_sequence_main_region_on_disaply_purchase_screen(self):
        """Default exit sequence for state purchase screen.
        """
        # Default exit sequence for state purchase screen
        self.__exit_sequence_main_region_on_disaply_purchase_screen_ps()

    def __exit_sequence_main_region_on_disaply_purchase_screen_ps_main_screen(self):
        """Default exit sequence for state main screen.
        """
        # Default exit sequence for state main screen
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0

    def __exit_sequence_main_region_on_disaply_purchase_screen_ps_item_scanned(self):
        """Default exit sequence for state item scanned.
        """
        # Default exit sequence for state item scanned
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0
        self.__exit_action_main_region_on_disaply_purchase_screen_ps_item_scanned()

    def __exit_sequence_main_region_on_disaply_purchase_screen_ps_item_weighed(self):
        """Default exit sequence for state item weighed.
        """
        # Default exit sequence for state item weighed
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0
        self.__exit_action_main_region_on_disaply_purchase_screen_ps_item_weighed()

    def __exit_sequence_main_region_on_disaply_purchase_screen_ps__please_place_item_on_scale_(self):
        """Default exit sequence for state "Please place item on scale".
        """
        # Default exit sequence for state "Please place item on scale"
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0

    def __exit_sequence_main_region_on_disaply_purchase_screen_ps__18__approval_(self):
        """Default exit sequence for state "18+ approval".
        """
        # Default exit sequence for state "18+ approval"
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0
        self.__exit_action_main_region_on_disaply_purchase_screen_ps__18__approval_()

    def __exit_sequence_main_region_on_disaply_welcome_screen(self):
        """Default exit sequence for state welcome screen.
        """
        # Default exit sequence for state welcome screen
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0

    def __exit_sequence_main_region_on_disaply_member_screen(self):
        """Default exit sequence for state member screen.
        """
        # Default exit sequence for state member screen
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0

    def __exit_sequence_main_region_on_disaply_help_screen(self):
        """Default exit sequence for state help screen.
        """
        # Default exit sequence for state help screen
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0

    def __exit_sequence_main_region_on_disaply_payment_screen(self):
        """Default exit sequence for state payment screen.
        """
        # Default exit sequence for state payment screen
        self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s()

    def __exit_sequence_main_region_on_disaply_payment_screen_pay_s__please_select_payment_type_(self):
        """Default exit sequence for state "please select payment type".
        """
        # Default exit sequence for state "please select payment type"
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0

    def __exit_sequence_main_region_on_disaply_payment_screen_pay_s__complete_payment_in_terminal_(self):
        """Default exit sequence for state "complete payment in terminal".
        """
        # Default exit sequence for state "complete payment in terminal"
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0

    def __exit_sequence_main_region_on_disaply_payment_screen_pay_s__purchase_complete__thank_you_(self):
        """Default exit sequence for state "Purchase complete, Thank you".
        """
        # Default exit sequence for state "Purchase complete, Thank you"
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0
        self.__exit_action_main_region_on_disaply_payment_screen_pay_s__purchase_complete__thank_you_()

    def __exit_sequence_main_region_on_disaply_payment_screen_pay_s__error__please_try_again_(self):
        """Default exit sequence for state "Error, please try again".
        """
        # Default exit sequence for state "Error, please try again"
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0
        self.__exit_action_main_region_on_disaply_payment_screen_pay_s__error__please_try_again_()

    def __exit_sequence_main_region_on_disaply_payment_screen_pay_s__total_price_(self):
        """Default exit sequence for state "Total price".
        """
        # Default exit sequence for state "Total price"
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0
        self.__exit_action_main_region_on_disaply_payment_screen_pay_s__total_price_()

    def __exit_sequence_main_region_on_disaply_payment_screen_pay_s__total_member_price_(self):
        """Default exit sequence for state "Total member price".
        """
        # Default exit sequence for state "Total member price"
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0

    def __exit_sequence_main_region_on_disaply_items_screen(self):
        """Default exit sequence for state items screen.
        """
        # Default exit sequence for state items screen
        self.__exit_sequence_main_region_on_disaply_items_screen_items_screen()

    def __exit_sequence_main_region_on_disaply_items_screen_items_screen_select_item(self):
        """Default exit sequence for state select item.
        """
        # Default exit sequence for state select item
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0

    def __exit_sequence_main_region_on_disaply_items_screen_items_screen_item_added(self):
        """Default exit sequence for state item added.
        """
        # Default exit sequence for state item added
        self.__state_vector[0] = self.State.null_state
        self.__state_conf_vector_position = 0
        self.__exit_action_main_region_on_disaply_items_screen_items_screen_item_added()

    def __exit_sequence_main_region_on_indicator_light_on_light_color_green(self):
        """Default exit sequence for state Green.
        """
        # Default exit sequence for state Green
        self.__state_vector[1] = self.State.null_state
        self.__state_conf_vector_position = 1

    def __exit_sequence_main_region_on_indicator_light_on_light_color_red(self):
        """Default exit sequence for state Red.
        """
        # Default exit sequence for state Red
        self.__state_vector[1] = self.State.null_state
        self.__state_conf_vector_position = 1

    def __exit_sequence_main_region_on_indicator_light_on_light_mode_steady(self):
        """Default exit sequence for state steady.
        """
        # Default exit sequence for state steady
        self.__state_vector[2] = self.State.null_state
        self.__state_conf_vector_position = 2

    def __exit_sequence_main_region_on_indicator_light_on_light_mode_blinking(self):
        """Default exit sequence for state blinking.
        """
        # Default exit sequence for state blinking
        self.__state_vector[2] = self.State.null_state
        self.__state_conf_vector_position = 2

    def __exit_sequence_main_region_on_magnetic_stripe_card_reader_standyby(self):
        """Default exit sequence for state standyby.
        """
        # Default exit sequence for state standyby
        self.__state_vector[3] = self.State.null_state
        self.__state_conf_vector_position = 3

    def __exit_sequence_main_region_on_magnetic_stripe_card_reader_read_card(self):
        """Default exit sequence for state read card.
        """
        # Default exit sequence for state read card
        self.__state_vector[3] = self.State.null_state
        self.__state_conf_vector_position = 3
        self.__exit_action_main_region_on_magnetic_stripe_card_reader_read_card()

    def __exit_sequence_main_region_on_scale_standby(self):
        """Default exit sequence for state standby.
        """
        # Default exit sequence for state standby
        self.__state_vector[4] = self.State.null_state
        self.__state_conf_vector_position = 4

    def __exit_sequence_main_region_on_scale_weigh(self):
        """Default exit sequence for state weigh.
        """
        # Default exit sequence for state weigh
        self.__state_vector[4] = self.State.null_state
        self.__state_conf_vector_position = 4
        self.__exit_action_main_region_on_scale_weigh()

    def __exit_sequence_main_region_on_scanner_standby(self):
        """Default exit sequence for state standby.
        """
        # Default exit sequence for state standby
        self.__state_vector[5] = self.State.null_state
        self.__state_conf_vector_position = 5

    def __exit_sequence_main_region_on_scanner_scan(self):
        """Default exit sequence for state scan.
        """
        # Default exit sequence for state scan
        self.__state_vector[5] = self.State.null_state
        self.__state_conf_vector_position = 5
        self.__exit_action_main_region_on_scanner_scan()

    def __exit_sequence_main_region_on_user_mode_guest(self):
        """Default exit sequence for state guest.
        """
        # Default exit sequence for state guest
        self.__state_vector[6] = self.State.null_state
        self.__state_conf_vector_position = 6

    def __exit_sequence_main_region_on_user_mode_member(self):
        """Default exit sequence for state member.
        """
        # Default exit sequence for state member
        self.__state_vector[6] = self.State.null_state
        self.__state_conf_vector_position = 6

    def __exit_sequence_main_region_on_payment_terminal_off(self):
        """Default exit sequence for state off.
        """
        # Default exit sequence for state off
        self.__state_vector[7] = self.State.null_state
        self.__state_conf_vector_position = 7

    def __exit_sequence_main_region_on_payment_terminal_on(self):
        """Default exit sequence for state on.
        """
        # Default exit sequence for state on
        self.__exit_sequence_main_region_on_payment_terminal_on_display()

    def __exit_sequence_main_region_on_payment_terminal_on_display__please_swipe_or_tap_card_(self):
        """Default exit sequence for state "please swipe or tap card".
        """
        # Default exit sequence for state "please swipe or tap card"
        self.__state_vector[7] = self.State.null_state
        self.__state_conf_vector_position = 7

    def __exit_sequence_main_region_on_payment_terminal_on_display__approved_(self):
        """Default exit sequence for state "Approved".
        """
        # Default exit sequence for state "Approved"
        self.__state_vector[7] = self.State.null_state
        self.__state_conf_vector_position = 7

    def __exit_sequence_main_region_on_payment_terminal_on_display__declined_(self):
        """Default exit sequence for state "Declined".
        """
        # Default exit sequence for state "Declined"
        self.__state_vector[7] = self.State.null_state
        self.__state_conf_vector_position = 7
        self.__exit_action_main_region_on_payment_terminal_on_display__declined_()

    def __exit_sequence_main_region_on_payment_terminal_on_display_processing(self):
        """Default exit sequence for state processing.
        """
        # Default exit sequence for state processing
        self.__state_vector[7] = self.State.null_state
        self.__state_conf_vector_position = 7
        self.__exit_action_main_region_on_payment_terminal_on_display_processing()

    def __exit_sequence_main_region_on_printer_off(self):
        """Default exit sequence for state off.
        """
        # Default exit sequence for state off
        self.__state_vector[8] = self.State.null_state
        self.__state_conf_vector_position = 8

    def __exit_sequence_main_region_on_printer_on(self):
        """Default exit sequence for state on.
        """
        # Default exit sequence for state on
        self.__state_vector[8] = self.State.null_state
        self.__state_conf_vector_position = 8

    def __exit_sequence_main_region_on_printer_printing(self):
        """Default exit sequence for state printing.
        """
        # Default exit sequence for state printing
        self.__state_vector[8] = self.State.null_state
        self.__state_conf_vector_position = 8
        self.__exit_action_main_region_on_printer_printing()

    def __exit_sequence_main_region(self):
        """Default exit sequence for region main region.
        """
        # Default exit sequence for region main region
        state = self.__state_vector[0]
        if state == self.State.main_region_off:
            self.__exit_sequence_main_region_off()
        elif state == self.State.main_region_on_disaply_purchase_screen_psmain_screen:
            self.__exit_sequence_main_region_on_disaply_purchase_screen_ps_main_screen()
        elif state == self.State.main_region_on_disaply_purchase_screen_psitem_scanned:
            self.__exit_sequence_main_region_on_disaply_purchase_screen_ps_item_scanned()
        elif state == self.State.main_region_on_disaply_purchase_screen_psitem_weighed:
            self.__exit_sequence_main_region_on_disaply_purchase_screen_ps_item_weighed()
        elif state == self.State.main_region_on_disaply_purchase_screen_ps_please_place_item_on_scale_:
            self.__exit_sequence_main_region_on_disaply_purchase_screen_ps__please_place_item_on_scale_()
        elif state == self.State.main_region_on_disaply_purchase_screen_ps_18__approval_:
            self.__exit_sequence_main_region_on_disaply_purchase_screen_ps__18__approval_()
        elif state == self.State.main_region_on_disaply_welcome_screen:
            self.__exit_sequence_main_region_on_disaply_welcome_screen()
        elif state == self.State.main_region_on_disaply_member_screen:
            self.__exit_sequence_main_region_on_disaply_member_screen()
        elif state == self.State.main_region_on_disaply_help_screen:
            self.__exit_sequence_main_region_on_disaply_help_screen()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_please_select_payment_type_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__please_select_payment_type_()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_complete_payment_in_terminal_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__complete_payment_in_terminal_()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_purchase_complete__thank_you_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__purchase_complete__thank_you_()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_error__please_try_again_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__error__please_try_again_()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_total_price_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__total_price_()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_total_member_price_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__total_member_price_()
        elif state == self.State.main_region_on_disaply_items_screen_items_screen_select_item:
            self.__exit_sequence_main_region_on_disaply_items_screen_items_screen_select_item()
        elif state == self.State.main_region_on_disaply_items_screen_items_screen_item_added:
            self.__exit_sequence_main_region_on_disaply_items_screen_items_screen_item_added()
        state = self.__state_vector[1]
        if state == self.State.main_region_on_indicator_light_on_light_color_green:
            self.__exit_sequence_main_region_on_indicator_light_on_light_color_green()
        elif state == self.State.main_region_on_indicator_light_on_light_color_red:
            self.__exit_sequence_main_region_on_indicator_light_on_light_color_red()
        state = self.__state_vector[2]
        if state == self.State.main_region_on_indicator_light_on_light_mode_steady:
            self.__exit_sequence_main_region_on_indicator_light_on_light_mode_steady()
        elif state == self.State.main_region_on_indicator_light_on_light_mode_blinking:
            self.__exit_sequence_main_region_on_indicator_light_on_light_mode_blinking()
        state = self.__state_vector[3]
        if state == self.State.main_region_on_magnetic_stripe_card_reader_standyby:
            self.__exit_sequence_main_region_on_magnetic_stripe_card_reader_standyby()
        elif state == self.State.main_region_on_magnetic_stripe_card_reader_read_card:
            self.__exit_sequence_main_region_on_magnetic_stripe_card_reader_read_card()
        state = self.__state_vector[4]
        if state == self.State.main_region_on_scale_standby:
            self.__exit_sequence_main_region_on_scale_standby()
        elif state == self.State.main_region_on_scale_weigh:
            self.__exit_sequence_main_region_on_scale_weigh()
        state = self.__state_vector[5]
        if state == self.State.main_region_on_scanner_standby:
            self.__exit_sequence_main_region_on_scanner_standby()
        elif state == self.State.main_region_on_scanner_scan:
            self.__exit_sequence_main_region_on_scanner_scan()
        state = self.__state_vector[6]
        if state == self.State.main_region_on_user_mode_guest:
            self.__exit_sequence_main_region_on_user_mode_guest()
        elif state == self.State.main_region_on_user_mode_member:
            self.__exit_sequence_main_region_on_user_mode_member()
        state = self.__state_vector[7]
        if state == self.State.main_region_on_payment_terminal_off:
            self.__exit_sequence_main_region_on_payment_terminal_off()
        elif state == self.State.main_region_on_payment_terminal_on_display_please_swipe_or_tap_card_:
            self.__exit_sequence_main_region_on_payment_terminal_on_display__please_swipe_or_tap_card_()
        elif state == self.State.main_region_on_payment_terminal_on_display_approved_:
            self.__exit_sequence_main_region_on_payment_terminal_on_display__approved_()
        elif state == self.State.main_region_on_payment_terminal_on_display_declined_:
            self.__exit_sequence_main_region_on_payment_terminal_on_display__declined_()
        elif state == self.State.main_region_on_payment_terminal_on_display_processing:
            self.__exit_sequence_main_region_on_payment_terminal_on_display_processing()
        state = self.__state_vector[8]
        if state == self.State.main_region_on_printer_off:
            self.__exit_sequence_main_region_on_printer_off()
        elif state == self.State.main_region_on_printer_on:
            self.__exit_sequence_main_region_on_printer_on()
        elif state == self.State.main_region_on_printer_printing:
            self.__exit_sequence_main_region_on_printer_printing()

    def __exit_sequence_main_region_on_disaply(self):
        """Default exit sequence for region Disaply.
        """
        # Default exit sequence for region Disaply
        state = self.__state_vector[0]
        if state == self.State.main_region_on_disaply_purchase_screen_psmain_screen:
            self.__exit_sequence_main_region_on_disaply_purchase_screen_ps_main_screen()
        elif state == self.State.main_region_on_disaply_purchase_screen_psitem_scanned:
            self.__exit_sequence_main_region_on_disaply_purchase_screen_ps_item_scanned()
        elif state == self.State.main_region_on_disaply_purchase_screen_psitem_weighed:
            self.__exit_sequence_main_region_on_disaply_purchase_screen_ps_item_weighed()
        elif state == self.State.main_region_on_disaply_purchase_screen_ps_please_place_item_on_scale_:
            self.__exit_sequence_main_region_on_disaply_purchase_screen_ps__please_place_item_on_scale_()
        elif state == self.State.main_region_on_disaply_purchase_screen_ps_18__approval_:
            self.__exit_sequence_main_region_on_disaply_purchase_screen_ps__18__approval_()
        elif state == self.State.main_region_on_disaply_welcome_screen:
            self.__exit_sequence_main_region_on_disaply_welcome_screen()
        elif state == self.State.main_region_on_disaply_member_screen:
            self.__exit_sequence_main_region_on_disaply_member_screen()
        elif state == self.State.main_region_on_disaply_help_screen:
            self.__exit_sequence_main_region_on_disaply_help_screen()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_please_select_payment_type_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__please_select_payment_type_()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_complete_payment_in_terminal_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__complete_payment_in_terminal_()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_purchase_complete__thank_you_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__purchase_complete__thank_you_()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_error__please_try_again_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__error__please_try_again_()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_total_price_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__total_price_()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_total_member_price_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__total_member_price_()
        elif state == self.State.main_region_on_disaply_items_screen_items_screen_select_item:
            self.__exit_sequence_main_region_on_disaply_items_screen_items_screen_select_item()
        elif state == self.State.main_region_on_disaply_items_screen_items_screen_item_added:
            self.__exit_sequence_main_region_on_disaply_items_screen_items_screen_item_added()

    def __exit_sequence_main_region_on_disaply_purchase_screen_ps(self):
        """Default exit sequence for region PS.
        """
        # Default exit sequence for region PS
        state = self.__state_vector[0]
        if state == self.State.main_region_on_disaply_purchase_screen_psmain_screen:
            self.__exit_sequence_main_region_on_disaply_purchase_screen_ps_main_screen()
        elif state == self.State.main_region_on_disaply_purchase_screen_psitem_scanned:
            self.__exit_sequence_main_region_on_disaply_purchase_screen_ps_item_scanned()
        elif state == self.State.main_region_on_disaply_purchase_screen_psitem_weighed:
            self.__exit_sequence_main_region_on_disaply_purchase_screen_ps_item_weighed()
        elif state == self.State.main_region_on_disaply_purchase_screen_ps_please_place_item_on_scale_:
            self.__exit_sequence_main_region_on_disaply_purchase_screen_ps__please_place_item_on_scale_()
        elif state == self.State.main_region_on_disaply_purchase_screen_ps_18__approval_:
            self.__exit_sequence_main_region_on_disaply_purchase_screen_ps__18__approval_()

    def __exit_sequence_main_region_on_disaply_payment_screen_pay_s(self):
        """Default exit sequence for region PayS.
        """
        # Default exit sequence for region PayS
        state = self.__state_vector[0]
        if state == self.State.main_region_on_disaply_payment_screen_pay_s_please_select_payment_type_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__please_select_payment_type_()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_complete_payment_in_terminal_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__complete_payment_in_terminal_()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_purchase_complete__thank_you_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__purchase_complete__thank_you_()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_error__please_try_again_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__error__please_try_again_()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_total_price_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__total_price_()
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_total_member_price_:
            self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__total_member_price_()

    def __exit_sequence_main_region_on_disaply_items_screen_items_screen(self):
        """Default exit sequence for region items screen.
        """
        # Default exit sequence for region items screen
        state = self.__state_vector[0]
        if state == self.State.main_region_on_disaply_items_screen_items_screen_select_item:
            self.__exit_sequence_main_region_on_disaply_items_screen_items_screen_select_item()
        elif state == self.State.main_region_on_disaply_items_screen_items_screen_item_added:
            self.__exit_sequence_main_region_on_disaply_items_screen_items_screen_item_added()

    def __exit_sequence_main_region_on_indicator_light(self):
        """Default exit sequence for region Indicator light.
        """
        # Default exit sequence for region Indicator light
        state = self.__state_vector[1]
        if state == self.State.main_region_on_indicator_light_on_light_color_green:
            self.__exit_sequence_main_region_on_indicator_light_on_light_color_green()
        elif state == self.State.main_region_on_indicator_light_on_light_color_red:
            self.__exit_sequence_main_region_on_indicator_light_on_light_color_red()
        state = self.__state_vector[2]
        if state == self.State.main_region_on_indicator_light_on_light_mode_steady:
            self.__exit_sequence_main_region_on_indicator_light_on_light_mode_steady()
        elif state == self.State.main_region_on_indicator_light_on_light_mode_blinking:
            self.__exit_sequence_main_region_on_indicator_light_on_light_mode_blinking()

    def __exit_sequence_main_region_on_magnetic_stripe_card_reader(self):
        """Default exit sequence for region Magnetic stripe card reader.
        """
        # Default exit sequence for region Magnetic stripe card reader
        state = self.__state_vector[3]
        if state == self.State.main_region_on_magnetic_stripe_card_reader_standyby:
            self.__exit_sequence_main_region_on_magnetic_stripe_card_reader_standyby()
        elif state == self.State.main_region_on_magnetic_stripe_card_reader_read_card:
            self.__exit_sequence_main_region_on_magnetic_stripe_card_reader_read_card()

    def __exit_sequence_main_region_on_scale(self):
        """Default exit sequence for region Scale.
        """
        # Default exit sequence for region Scale
        state = self.__state_vector[4]
        if state == self.State.main_region_on_scale_standby:
            self.__exit_sequence_main_region_on_scale_standby()
        elif state == self.State.main_region_on_scale_weigh:
            self.__exit_sequence_main_region_on_scale_weigh()

    def __exit_sequence_main_region_on_scanner(self):
        """Default exit sequence for region Scanner.
        """
        # Default exit sequence for region Scanner
        state = self.__state_vector[5]
        if state == self.State.main_region_on_scanner_standby:
            self.__exit_sequence_main_region_on_scanner_standby()
        elif state == self.State.main_region_on_scanner_scan:
            self.__exit_sequence_main_region_on_scanner_scan()

    def __exit_sequence_main_region_on_user_mode(self):
        """Default exit sequence for region User Mode.
        """
        # Default exit sequence for region User Mode
        state = self.__state_vector[6]
        if state == self.State.main_region_on_user_mode_guest:
            self.__exit_sequence_main_region_on_user_mode_guest()
        elif state == self.State.main_region_on_user_mode_member:
            self.__exit_sequence_main_region_on_user_mode_member()

    def __exit_sequence_main_region_on_payment_terminal(self):
        """Default exit sequence for region payment terminal.
        """
        # Default exit sequence for region payment terminal
        state = self.__state_vector[7]
        if state == self.State.main_region_on_payment_terminal_off:
            self.__exit_sequence_main_region_on_payment_terminal_off()
        elif state == self.State.main_region_on_payment_terminal_on_display_please_swipe_or_tap_card_:
            self.__exit_sequence_main_region_on_payment_terminal_on_display__please_swipe_or_tap_card_()
        elif state == self.State.main_region_on_payment_terminal_on_display_approved_:
            self.__exit_sequence_main_region_on_payment_terminal_on_display__approved_()
        elif state == self.State.main_region_on_payment_terminal_on_display_declined_:
            self.__exit_sequence_main_region_on_payment_terminal_on_display__declined_()
        elif state == self.State.main_region_on_payment_terminal_on_display_processing:
            self.__exit_sequence_main_region_on_payment_terminal_on_display_processing()

    def __exit_sequence_main_region_on_payment_terminal_on_display(self):
        """Default exit sequence for region display.
        """
        # Default exit sequence for region display
        state = self.__state_vector[7]
        if state == self.State.main_region_on_payment_terminal_on_display_please_swipe_or_tap_card_:
            self.__exit_sequence_main_region_on_payment_terminal_on_display__please_swipe_or_tap_card_()
        elif state == self.State.main_region_on_payment_terminal_on_display_approved_:
            self.__exit_sequence_main_region_on_payment_terminal_on_display__approved_()
        elif state == self.State.main_region_on_payment_terminal_on_display_declined_:
            self.__exit_sequence_main_region_on_payment_terminal_on_display__declined_()
        elif state == self.State.main_region_on_payment_terminal_on_display_processing:
            self.__exit_sequence_main_region_on_payment_terminal_on_display_processing()

    def __exit_sequence_main_region_on_printer(self):
        """Default exit sequence for region Printer.
        """
        # Default exit sequence for region Printer
        state = self.__state_vector[8]
        if state == self.State.main_region_on_printer_off:
            self.__exit_sequence_main_region_on_printer_off()
        elif state == self.State.main_region_on_printer_on:
            self.__exit_sequence_main_region_on_printer_on()
        elif state == self.State.main_region_on_printer_printing:
            self.__exit_sequence_main_region_on_printer_printing()

    def __react_main_region__entry_default(self):
        """Default react sequence for initial entry .
        """
        # Default react sequence for initial entry
        self.__enter_sequence_main_region_off_default()

    def __react_main_region_on_disaply_purchase_screen_ps__entry_default(self):
        """Default react sequence for initial entry .
        """
        # Default react sequence for initial entry
        self.__enter_sequence_main_region_on_disaply_purchase_screen_ps_main_screen_default()

    def __react_main_region_on_disaply__entry_default(self):
        """Default react sequence for initial entry .
        """
        # Default react sequence for initial entry
        self.__enter_sequence_main_region_on_disaply_welcome_screen_default()

    def __react_main_region_on_disaply_payment_screen_pay_s__entry_default(self):
        """Default react sequence for initial entry .
        """
        # Default react sequence for initial entry
        self.__enter_sequence_main_region_on_disaply_payment_screen_pay_s__total_price__default()

    def __react_main_region_on_disaply_items_screen_items_screen__entry_default(self):
        """Default react sequence for initial entry .
        """
        # Default react sequence for initial entry
        self.__enter_sequence_main_region_on_disaply_items_screen_items_screen_select_item_default()

    def __react_main_region_on_indicator_light__entry_default(self):
        """Default react sequence for initial entry .
        """
        # Default react sequence for initial entry
        self.__enter_sequence_main_region_on_indicator_light_on_default()

    def __react_main_region_on_indicator_light_on_light_color__entry_default(self):
        """Default react sequence for initial entry .
        """
        # Default react sequence for initial entry
        self.__enter_sequence_main_region_on_indicator_light_on_light_color_green_default()

    def __react_main_region_on_indicator_light_on_light_mode__entry_default(self):
        """Default react sequence for initial entry .
        """
        # Default react sequence for initial entry
        self.__enter_sequence_main_region_on_indicator_light_on_light_mode_steady_default()

    def __react_main_region_on_magnetic_stripe_card_reader__entry_default(self):
        """Default react sequence for initial entry .
        """
        # Default react sequence for initial entry
        self.__enter_sequence_main_region_on_magnetic_stripe_card_reader_standyby_default()

    def __react_main_region_on_scale__entry_default(self):
        """Default react sequence for initial entry .
        """
        # Default react sequence for initial entry
        self.__enter_sequence_main_region_on_scale_standby_default()

    def __react_main_region_on_scanner__entry_default(self):
        """Default react sequence for initial entry .
        """
        # Default react sequence for initial entry
        self.__enter_sequence_main_region_on_scanner_standby_default()

    def __react_main_region_on_user_mode__entry_default(self):
        """Default react sequence for initial entry .
        """
        # Default react sequence for initial entry
        self.__enter_sequence_main_region_on_user_mode_guest_default()

    def __react_main_region_on_payment_terminal__entry_default(self):
        """Default react sequence for initial entry .
        """
        # Default react sequence for initial entry
        self.__enter_sequence_main_region_on_payment_terminal_off_default()

    def __react_main_region_on_payment_terminal_on_display__entry_default(self):
        """Default react sequence for initial entry .
        """
        # Default react sequence for initial entry
        self.__enter_sequence_main_region_on_payment_terminal_on_display__please_swipe_or_tap_card__default()

    def __react_main_region_on_printer__entry_default(self):
        """Default react sequence for initial entry .
        """
        # Default react sequence for initial entry
        self.__enter_sequence_main_region_on_printer_off_default()

    def __react(self, transitioned_before):
        """Implementation of __react function.
        """
        # State machine reactions.
        return transitioned_before

    def __main_region_off_react(self, transitioned_before):
        """Implementation of __main_region_off_react function.
        """
        # The reactions of state Off.
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.power_pressed:
                self.__exit_sequence_main_region_off()
                self.__enter_sequence_main_region_on_default()
                self.__react(0)
                transitioned_after = 0
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__react(transitioned_before)
        return transitioned_after

    def __main_region_on_react(self, transitioned_before):
        """Implementation of __main_region_on_react function.
        """
        # The reactions of state On.
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.power_pressed:
                self.__exit_sequence_main_region_on()
                self.__enter_sequence_main_region_off_default()
                self.__react(0)
                transitioned_after = 8
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__react(transitioned_before)
        return transitioned_after

    def __main_region_on_disaply_purchase_screen_react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_purchase_screen_react function.
        """
        # The reactions of state purchase screen.
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.help_pressed:
                self.__exit_sequence_main_region_on_disaply_purchase_screen()
                self.raise_light_mb()
                self.ps = True
                self.__enter_sequence_main_region_on_disaply_help_screen_default()
                transitioned_after = 0
            elif self.pay_pressed:
                self.__exit_sequence_main_region_on_disaply_purchase_screen()
                self.__enter_sequence_main_region_on_disaply_payment_screen_default()
                transitioned_after = 0
        return transitioned_after

    def __main_region_on_disaply_purchase_screen_ps_main_screen_react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_purchase_screen_ps_main_screen_react function.
        """
        # The reactions of state main screen.
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.barcode_detected:
                self.__exit_sequence_main_region_on_disaply_purchase_screen_ps_main_screen()
                self.__enter_sequence_main_region_on_disaply_purchase_screen_ps_item_scanned_default()
                self.__main_region_on_disaply_purchase_screen_react(0)
                transitioned_after = 0
            elif self.select_item_pressed:
                self.__exit_sequence_main_region_on_disaply_purchase_screen()
                self.__enter_sequence_main_region_on_disaply_items_screen_default()
                transitioned_after = 0
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_disaply_purchase_screen_react(transitioned_before)
        return transitioned_after

    def __main_region_on_disaply_purchase_screen_ps_item_scanned_react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_purchase_screen_ps_item_scanned_react function.
        """
        # The reactions of state item scanned.
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if (self.__time_events[0]) and (self.weigh):
                self.__exit_sequence_main_region_on_disaply_purchase_screen_ps_item_scanned()
                self.__time_events[0] = False
                self.__enter_sequence_main_region_on_disaply_purchase_screen_ps__please_place_item_on_scale__default()
                self.__main_region_on_disaply_purchase_screen_react(0)
                transitioned_after = 0
            elif self.__time_events[1]:
                self.__exit_sequence_main_region_on_disaply_purchase_screen_ps_item_scanned()
                self.__time_events[1] = False
                self.__enter_sequence_main_region_on_disaply_purchase_screen_ps_main_screen_default()
                self.__main_region_on_disaply_purchase_screen_react(0)
                transitioned_after = 0
            elif (self.__time_events[2]) and (self.approve):
                self.__exit_sequence_main_region_on_disaply_purchase_screen_ps_item_scanned()
                self.__time_events[2] = False
                self.__enter_sequence_main_region_on_disaply_purchase_screen_ps__18__approval__default()
                self.__main_region_on_disaply_purchase_screen_react(0)
                transitioned_after = 0
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_disaply_purchase_screen_react(transitioned_before)
        return transitioned_after

    def __main_region_on_disaply_purchase_screen_ps_item_weighed_react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_purchase_screen_ps_item_weighed_react function.
        """
        # The reactions of state item weighed.
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.__time_events[3]:
                self.__exit_sequence_main_region_on_disaply_purchase_screen_ps_item_weighed()
                self.__time_events[3] = False
                self.__enter_sequence_main_region_on_disaply_purchase_screen_ps_main_screen_default()
                self.__main_region_on_disaply_purchase_screen_react(0)
                transitioned_after = 0
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_disaply_purchase_screen_react(transitioned_before)
        return transitioned_after

    def __main_region_on_disaply_purchase_screen_ps__please_place_item_on_scale__react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_purchase_screen_ps__please_place_item_on_scale__react function.
        """
        # The reactions of state "Please place item on scale".
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.weight_detected:
                self.__exit_sequence_main_region_on_disaply_purchase_screen_ps__please_place_item_on_scale_()
                self.__enter_sequence_main_region_on_disaply_purchase_screen_ps_item_weighed_default()
                self.__main_region_on_disaply_purchase_screen_react(0)
                transitioned_after = 0
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_disaply_purchase_screen_react(transitioned_before)
        return transitioned_after

    def __main_region_on_disaply_purchase_screen_ps__18__approval__react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_purchase_screen_ps__18__approval__react function.
        """
        # The reactions of state "18+ approval".
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.__time_events[4]:
                self.__exit_sequence_main_region_on_disaply_purchase_screen()
                self.raise_light_mb()
                self.__time_events[4] = False
                self.__enter_sequence_main_region_on_disaply_help_screen_default()
                transitioned_after = 0
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_disaply_purchase_screen_react(transitioned_before)
        return transitioned_after

    def __main_region_on_disaply_welcome_screen_react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_welcome_screen_react function.
        """
        # The reactions of state welcome screen.
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.member_pressed:
                self.__exit_sequence_main_region_on_disaply_welcome_screen()
                self.__enter_sequence_main_region_on_disaply_member_screen_default()
                transitioned_after = 0
            elif self.guest_pressed:
                self.__exit_sequence_main_region_on_disaply_welcome_screen()
                self.raise_switch_red()
                self.__enter_sequence_main_region_on_disaply_purchase_screen_default()
                transitioned_after = 0
        return transitioned_after

    def __main_region_on_disaply_member_screen_react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_member_screen_react function.
        """
        # The reactions of state member screen.
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.id_entered:
                self.__exit_sequence_main_region_on_disaply_member_screen()
                self.raise_switch_red()
                self.raise_member_mode()
                self.__enter_sequence_main_region_on_disaply_purchase_screen_default()
                transitioned_after = 0
            elif self.back_pressed:
                self.__exit_sequence_main_region_on_disaply_member_screen()
                self.__enter_sequence_main_region_on_disaply_welcome_screen_default()
                transitioned_after = 0
        return transitioned_after

    def __main_region_on_disaply_help_screen_react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_help_screen_react function.
        """
        # The reactions of state help screen.
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if (self.magnetic_card_swiped) and (self.ps):
                self.__exit_sequence_main_region_on_disaply_help_screen()
                self.raise_light_ms()
                self.__enter_sequence_main_region_on_disaply_purchase_screen_default()
                transitioned_after = 0
            elif (self.magnetic_card_swiped) and (not self.ps):
                self.__exit_sequence_main_region_on_disaply_help_screen()
                self.raise_light_ms()
                self.__enter_sequence_main_region_on_disaply_items_screen_default()
                transitioned_after = 0
        return transitioned_after

    def __main_region_on_disaply_payment_screen_react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_payment_screen_react function.
        """
        # The reactions of state payment screen.
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.back_pressed:
                self.__exit_sequence_main_region_on_disaply_payment_screen()
                self.__enter_sequence_main_region_on_disaply_purchase_screen_default()
                transitioned_after = 0
        return transitioned_after

    def __main_region_on_disaply_payment_screen_pay_s__please_select_payment_type__react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_payment_screen_pay_s__please_select_payment_type__react function.
        """
        # The reactions of state "please select payment type".
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.select_pay_type:
                self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__please_select_payment_type_()
                self.raise_terminal_on()
                self.raise_printer_on()
                self.__enter_sequence_main_region_on_disaply_payment_screen_pay_s__complete_payment_in_terminal__default()
                self.__main_region_on_disaply_payment_screen_react(0)
                transitioned_after = 0
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_disaply_payment_screen_react(transitioned_before)
        return transitioned_after

    def __main_region_on_disaply_payment_screen_pay_s__complete_payment_in_terminal__react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_payment_screen_pay_s__complete_payment_in_terminal__react function.
        """
        # The reactions of state "complete payment in terminal".
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.papproved:
                self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__complete_payment_in_terminal_()
                self.raise_print_receipt()
                self.__enter_sequence_main_region_on_disaply_payment_screen_pay_s__purchase_complete__thank_you__default()
                self.__main_region_on_disaply_payment_screen_react(0)
                transitioned_after = 0
            elif self.pdeclined:
                self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__complete_payment_in_terminal_()
                self.__enter_sequence_main_region_on_disaply_payment_screen_pay_s__error__please_try_again__default()
                self.__main_region_on_disaply_payment_screen_react(0)
                transitioned_after = 0
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_disaply_payment_screen_react(transitioned_before)
        return transitioned_after

    def __main_region_on_disaply_payment_screen_pay_s__purchase_complete__thank_you__react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_payment_screen_pay_s__purchase_complete__thank_you__react function.
        """
        # The reactions of state "Purchase complete, Thank you".
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.__time_events[5]:
                self.__exit_sequence_main_region_on_disaply_payment_screen()
                self.raise_switch_green()
                self.raise_printer_off()
                self.raise_terminal_off()
                self.raise_guest_mode()
                self.__time_events[5] = False
                self.__enter_sequence_main_region_on_disaply_welcome_screen_default()
                transitioned_after = 0
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_disaply_payment_screen_react(transitioned_before)
        return transitioned_after

    def __main_region_on_disaply_payment_screen_pay_s__error__please_try_again__react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_payment_screen_pay_s__error__please_try_again__react function.
        """
        # The reactions of state "Error, please try again".
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.__time_events[6]:
                self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__error__please_try_again_()
                self.__time_events[6] = False
                self.__enter_sequence_main_region_on_disaply_payment_screen_pay_s__please_select_payment_type__default()
                self.__main_region_on_disaply_payment_screen_react(0)
                transitioned_after = 0
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_disaply_payment_screen_react(transitioned_before)
        return transitioned_after

    def __main_region_on_disaply_payment_screen_pay_s__total_price__react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_payment_screen_pay_s__total_price__react function.
        """
        # The reactions of state "Total price".
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.confirm_pressed:
                self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__total_price_()
                self.__enter_sequence_main_region_on_disaply_payment_screen_pay_s__please_select_payment_type__default()
                self.__main_region_on_disaply_payment_screen_react(0)
                transitioned_after = 0
            elif (self.__time_events[7]) and ((self.__state_vector[6] == self.State.main_region_on_user_mode_member)):
                self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__total_price_()
                self.__time_events[7] = False
                self.__enter_sequence_main_region_on_disaply_payment_screen_pay_s__total_member_price__default()
                self.__main_region_on_disaply_payment_screen_react(0)
                transitioned_after = 0
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_disaply_payment_screen_react(transitioned_before)
        return transitioned_after

    def __main_region_on_disaply_payment_screen_pay_s__total_member_price__react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_payment_screen_pay_s__total_member_price__react function.
        """
        # The reactions of state "Total member price".
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.confirm_pressed:
                self.__exit_sequence_main_region_on_disaply_payment_screen_pay_s__total_member_price_()
                self.__enter_sequence_main_region_on_disaply_payment_screen_pay_s__please_select_payment_type__default()
                self.__main_region_on_disaply_payment_screen_react(0)
                transitioned_after = 0
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_disaply_payment_screen_react(transitioned_before)
        return transitioned_after

    def __main_region_on_disaply_items_screen_react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_items_screen_react function.
        """
        # The reactions of state items screen.
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.back_pressed:
                self.__exit_sequence_main_region_on_disaply_items_screen()
                self.__enter_sequence_main_region_on_disaply_purchase_screen_ps_main_screen_default()
                transitioned_after = 0
            elif self.help_pressed:
                self.__exit_sequence_main_region_on_disaply_items_screen()
                self.raise_light_mb()
                self.ps = False
                self.__enter_sequence_main_region_on_disaply_help_screen_default()
                transitioned_after = 0
        return transitioned_after

    def __main_region_on_disaply_items_screen_items_screen_select_item_react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_items_screen_items_screen_select_item_react function.
        """
        # The reactions of state select item.
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if self.add_item:
                self.__exit_sequence_main_region_on_disaply_items_screen_items_screen_select_item()
                self.__enter_sequence_main_region_on_disaply_items_screen_items_screen_item_added_default()
                self.__main_region_on_disaply_items_screen_react(0)
                transitioned_after = 0
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_disaply_items_screen_react(transitioned_before)
        return transitioned_after

    def __main_region_on_disaply_items_screen_items_screen_item_added_react(self, transitioned_before):
        """Implementation of __main_region_on_disaply_items_screen_items_screen_item_added_react function.
        """
        # The reactions of state item added.
        transitioned_after = transitioned_before
        if transitioned_after < 0:
            if (self.__time_events[8]) and (self.weigh):
                self.__exit_sequence_main_region_on_disaply_items_screen()
                self.__time_events[8] = False
                self.__enter_sequence_main_region_on_disaply_purchase_screen_ps__please_place_item_on_scale__default()
                transitioned_after = 0
            elif (self.__time_events[9]) and (not self.weigh):
                self.__exit_sequence_main_region_on_disaply_items_screen()
                self.__time_events[9] = False
                self.__enter_sequence_main_region_on_disaply_purchase_screen_ps_main_screen_default()
                transitioned_after = 0
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_disaply_items_screen_react(transitioned_before)
        return transitioned_after

    def __main_region_on_indicator_light_on_react(self, transitioned_before):
        """Implementation of __main_region_on_indicator_light_on_react function.
        """
        # The reactions of state on.
        return transitioned_before

    def __main_region_on_indicator_light_on_light_color_green_react(self, transitioned_before):
        """Implementation of __main_region_on_indicator_light_on_light_color_green_react function.
        """
        # The reactions of state Green.
        transitioned_after = transitioned_before
        if transitioned_after < 1:
            if self.switch_red:
                self.__exit_sequence_main_region_on_indicator_light_on_light_color_green()
                self.__enter_sequence_main_region_on_indicator_light_on_light_color_red_default()
                transitioned_after = 1
        return transitioned_after

    def __main_region_on_indicator_light_on_light_color_red_react(self, transitioned_before):
        """Implementation of __main_region_on_indicator_light_on_light_color_red_react function.
        """
        # The reactions of state Red.
        transitioned_after = transitioned_before
        if transitioned_after < 1:
            if self.switch_green:
                self.__exit_sequence_main_region_on_indicator_light_on_light_color_red()
                self.__enter_sequence_main_region_on_indicator_light_on_light_color_green_default()
                transitioned_after = 1
        return transitioned_after

    def __main_region_on_indicator_light_on_light_mode_steady_react(self, transitioned_before):
        """Implementation of __main_region_on_indicator_light_on_light_mode_steady_react function.
        """
        # The reactions of state steady.
        transitioned_after = transitioned_before
        if transitioned_after < 2:
            if self.light_mb:
                self.__exit_sequence_main_region_on_indicator_light_on_light_mode_steady()
                self.__enter_sequence_main_region_on_indicator_light_on_light_mode_blinking_default()
                self.__main_region_on_indicator_light_on_react(1)
                transitioned_after = 2
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_indicator_light_on_react(transitioned_before)
        return transitioned_after

    def __main_region_on_indicator_light_on_light_mode_blinking_react(self, transitioned_before):
        """Implementation of __main_region_on_indicator_light_on_light_mode_blinking_react function.
        """
        # The reactions of state blinking.
        transitioned_after = transitioned_before
        if transitioned_after < 2:
            if self.light_ms:
                self.__exit_sequence_main_region_on_indicator_light_on_light_mode_blinking()
                self.__enter_sequence_main_region_on_indicator_light_on_light_mode_steady_default()
                self.__main_region_on_indicator_light_on_react(1)
                transitioned_after = 2
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_indicator_light_on_react(transitioned_before)
        return transitioned_after

    def __main_region_on_magnetic_stripe_card_reader_standyby_react(self, transitioned_before):
        """Implementation of __main_region_on_magnetic_stripe_card_reader_standyby_react function.
        """
        # The reactions of state standyby.
        transitioned_after = transitioned_before
        if transitioned_after < 3:
            if (self.magnetic_card_swiped) and (
            (self.__state_vector[2] == self.State.main_region_on_indicator_light_on_light_mode_blinking)):
                self.__exit_sequence_main_region_on_magnetic_stripe_card_reader_standyby()
                self.__enter_sequence_main_region_on_magnetic_stripe_card_reader_read_card_default()
                transitioned_after = 3
        return transitioned_after

    def __main_region_on_magnetic_stripe_card_reader_read_card_react(self, transitioned_before):
        """Implementation of __main_region_on_magnetic_stripe_card_reader_read_card_react function.
        """
        # The reactions of state read card.
        transitioned_after = transitioned_before
        if transitioned_after < 3:
            if self.__time_events[10]:
                self.__exit_sequence_main_region_on_magnetic_stripe_card_reader_read_card()
                self.__time_events[10] = False
                self.__enter_sequence_main_region_on_magnetic_stripe_card_reader_standyby_default()
                transitioned_after = 3
        return transitioned_after

    def __main_region_on_scale_standby_react(self, transitioned_before):
        """Implementation of __main_region_on_scale_standby_react function.
        """
        # The reactions of state standby.
        transitioned_after = transitioned_before
        if transitioned_after < 4:
            if (self.weight_detected) and (
            (self.__state_vector[0] == self.State.main_region_on_disaply_purchase_screen_psitem_weighed)):
                self.__exit_sequence_main_region_on_scale_standby()
                self.__enter_sequence_main_region_on_scale_weigh_default()
                transitioned_after = 4
        return transitioned_after

    def __main_region_on_scale_weigh_react(self, transitioned_before):
        """Implementation of __main_region_on_scale_weigh_react function.
        """
        # The reactions of state weigh.
        transitioned_after = transitioned_before
        if transitioned_after < 4:
            if self.__time_events[11]:
                self.__exit_sequence_main_region_on_scale_weigh()
                self.__time_events[11] = False
                self.__enter_sequence_main_region_on_scale_standby_default()
                transitioned_after = 4
        return transitioned_after

    def __main_region_on_scanner_standby_react(self, transitioned_before):
        """Implementation of __main_region_on_scanner_standby_react function.
        """
        # The reactions of state standby.
        transitioned_after = transitioned_before
        if transitioned_after < 5:
            if (self.barcode_detected) and (
            (self.__state_vector[0] == self.State.main_region_on_disaply_purchase_screen_psitem_scanned)):
                self.__exit_sequence_main_region_on_scanner_standby()
                self.__enter_sequence_main_region_on_scanner_scan_default()
                transitioned_after = 5
        return transitioned_after

    def __main_region_on_scanner_scan_react(self, transitioned_before):
        """Implementation of __main_region_on_scanner_scan_react function.
        """
        # The reactions of state scan.
        transitioned_after = transitioned_before
        if transitioned_after < 5:
            if self.__time_events[12]:
                self.__exit_sequence_main_region_on_scanner_scan()
                self.__time_events[12] = False
                self.__enter_sequence_main_region_on_scanner_standby_default()
                transitioned_after = 5
        return transitioned_after

    def __main_region_on_user_mode_guest_react(self, transitioned_before):
        """Implementation of __main_region_on_user_mode_guest_react function.
        """
        # The reactions of state guest.
        transitioned_after = transitioned_before
        if transitioned_after < 6:
            if self.member_mode:
                self.__exit_sequence_main_region_on_user_mode_guest()
                self.__enter_sequence_main_region_on_user_mode_member_default()
                transitioned_after = 6
        return transitioned_after

    def __main_region_on_user_mode_member_react(self, transitioned_before):
        """Implementation of __main_region_on_user_mode_member_react function.
        """
        # The reactions of state member.
        transitioned_after = transitioned_before
        if transitioned_after < 6:
            if self.guest_mode:
                self.__exit_sequence_main_region_on_user_mode_member()
                self.__enter_sequence_main_region_on_user_mode_guest_default()
                transitioned_after = 6
        return transitioned_after

    def __main_region_on_payment_terminal_off_react(self, transitioned_before):
        """Implementation of __main_region_on_payment_terminal_off_react function.
        """
        # The reactions of state off.
        transitioned_after = transitioned_before
        if transitioned_after < 7:
            if self.terminal_on:
                self.__exit_sequence_main_region_on_payment_terminal_off()
                self.__enter_sequence_main_region_on_payment_terminal_on_default()
                transitioned_after = 7
        return transitioned_after

    def __main_region_on_payment_terminal_on_react(self, transitioned_before):
        """Implementation of __main_region_on_payment_terminal_on_react function.
        """
        # The reactions of state on.
        transitioned_after = transitioned_before
        if transitioned_after < 7:
            if self.terminal_off:
                self.__exit_sequence_main_region_on_payment_terminal_on()
                self.__enter_sequence_main_region_on_payment_terminal_off_default()
                transitioned_after = 7
        return transitioned_after

    def __main_region_on_payment_terminal_on_display__please_swipe_or_tap_card__react(self, transitioned_before):
        """Implementation of __main_region_on_payment_terminal_on_display__please_swipe_or_tap_card__react function.
        """
        # The reactions of state "please swipe or tap card".
        transitioned_after = transitioned_before
        if transitioned_after < 7:
            if self.make_payment:
                self.__exit_sequence_main_region_on_payment_terminal_on_display__please_swipe_or_tap_card_()
                self.__enter_sequence_main_region_on_payment_terminal_on_display_processing_default()
                self.__main_region_on_payment_terminal_on_react(7)
                transitioned_after = 7
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_payment_terminal_on_react(transitioned_before)
        return transitioned_after

    def __main_region_on_payment_terminal_on_display__approved__react(self, transitioned_before):
        """Implementation of __main_region_on_payment_terminal_on_display__approved__react function.
        """
        # The reactions of state "Approved".
        transitioned_after = transitioned_before
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_payment_terminal_on_react(transitioned_before)
        return transitioned_after

    def __main_region_on_payment_terminal_on_display__declined__react(self, transitioned_before):
        """Implementation of __main_region_on_payment_terminal_on_display__declined__react function.
        """
        # The reactions of state "Declined".
        transitioned_after = transitioned_before
        if transitioned_after < 7:
            if self.__time_events[13]:
                self.__exit_sequence_main_region_on_payment_terminal_on_display__declined_()
                self.__time_events[13] = False
                self.__enter_sequence_main_region_on_payment_terminal_on_display__please_swipe_or_tap_card__default()
                self.__main_region_on_payment_terminal_on_react(7)
                transitioned_after = 7
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_payment_terminal_on_react(transitioned_before)
        return transitioned_after

    def __main_region_on_payment_terminal_on_display_processing_react(self, transitioned_before):
        """Implementation of __main_region_on_payment_terminal_on_display_processing_react function.
        """
        # The reactions of state processing.
        transitioned_after = transitioned_before
        if transitioned_after < 7:
            if self.bank_approval:
                self.__exit_sequence_main_region_on_payment_terminal_on_display_processing()
                self.raise_papproved()
                self.__enter_sequence_main_region_on_payment_terminal_on_display__approved__default()
                self.__main_region_on_payment_terminal_on_react(7)
                transitioned_after = 7
            elif self.__time_events[14]:
                self.__exit_sequence_main_region_on_payment_terminal_on_display_processing()
                self.raise_pdeclined()
                self.__time_events[14] = False
                self.__enter_sequence_main_region_on_payment_terminal_on_display__declined__default()
                self.__main_region_on_payment_terminal_on_react(7)
                transitioned_after = 7
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_payment_terminal_on_react(transitioned_before)
        return transitioned_after

    def __main_region_on_printer_off_react(self, transitioned_before):
        """Implementation of __main_region_on_printer_off_react function.
        """
        # The reactions of state off.
        transitioned_after = transitioned_before
        if transitioned_after < 8:
            if self.printer_on:
                self.__exit_sequence_main_region_on_printer_off()
                self.__enter_sequence_main_region_on_printer_on_default()
                self.__main_region_on_react(0)
                transitioned_after = 8
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_react(transitioned_before)
        return transitioned_after

    def __main_region_on_printer_on_react(self, transitioned_before):
        """Implementation of __main_region_on_printer_on_react function.
        """
        # The reactions of state on.
        transitioned_after = transitioned_before
        if transitioned_after < 8:
            if self.printer_off:
                self.__exit_sequence_main_region_on_printer_on()
                self.__enter_sequence_main_region_on_printer_off_default()
                self.__main_region_on_react(0)
                transitioned_after = 8
            elif self.print_receipt:
                self.__exit_sequence_main_region_on_printer_on()
                self.__enter_sequence_main_region_on_printer_printing_default()
                self.__main_region_on_react(0)
                transitioned_after = 8
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_react(transitioned_before)
        return transitioned_after

    def __main_region_on_printer_printing_react(self, transitioned_before):
        """Implementation of __main_region_on_printer_printing_react function.
        """
        # The reactions of state printing.
        transitioned_after = transitioned_before
        if transitioned_after < 8:
            if self.__time_events[15]:
                self.__exit_sequence_main_region_on_printer_printing()
                self.__time_events[15] = False
                self.__enter_sequence_main_region_on_printer_on_default()
                self.__main_region_on_react(0)
                transitioned_after = 8
        # If no transition was taken
        if transitioned_after == transitioned_before:
            # then execute local reactions.
            transitioned_after = self.__main_region_on_react(transitioned_before)
        return transitioned_after

    def __clear_in_events(self):
        """Implementation of __clear_in_events function.
        """
        self.add_item = False
        self.back_pressed = False
        self.bank_approval = False
        self.barcode_detected = False
        self.confirm_pressed = False
        self.guest_mode = False
        self.guest_pressed = False
        self.help_pressed = False
        self.id_entered = False
        self.light_mb = False
        self.light_ms = False
        self.magnetic_card_swiped = False
        self.make_payment = False
        self.member_mode = False
        self.member_pressed = False
        self.pay_pressed = False
        self.power_pressed = False
        self.print_receipt = False
        self.printer_off = False
        self.printer_on = False
        self.papproved = False
        self.pdeclined = False
        self.select_item_pressed = False
        self.select_pay_type = False
        self.switch_green = False
        self.switch_red = False
        self.terminal_off = False
        self.terminal_on = False
        self.weight_detected = False
        self.__time_events[0] = False
        self.__time_events[1] = False
        self.__time_events[2] = False
        self.__time_events[3] = False
        self.__time_events[4] = False
        self.__time_events[5] = False
        self.__time_events[6] = False
        self.__time_events[7] = False
        self.__time_events[8] = False
        self.__time_events[9] = False
        self.__time_events[10] = False
        self.__time_events[11] = False
        self.__time_events[12] = False
        self.__time_events[13] = False
        self.__time_events[14] = False
        self.__time_events[15] = False

    def __micro_step(self):
        """Implementation of __micro_step function.
        """
        transitioned = -1
        self.__state_conf_vector_position = 0
        state = self.__state_vector[0]
        if state == self.State.main_region_off:
            transitioned = self.__main_region_off_react(transitioned)
        elif state == self.State.main_region_on_disaply_purchase_screen_psmain_screen:
            transitioned = self.__main_region_on_disaply_purchase_screen_ps_main_screen_react(transitioned)
        elif state == self.State.main_region_on_disaply_purchase_screen_psitem_scanned:
            transitioned = self.__main_region_on_disaply_purchase_screen_ps_item_scanned_react(transitioned)
        elif state == self.State.main_region_on_disaply_purchase_screen_psitem_weighed:
            transitioned = self.__main_region_on_disaply_purchase_screen_ps_item_weighed_react(transitioned)
        elif state == self.State.main_region_on_disaply_purchase_screen_ps_please_place_item_on_scale_:
            transitioned = self.__main_region_on_disaply_purchase_screen_ps__please_place_item_on_scale__react(
                transitioned)
        elif state == self.State.main_region_on_disaply_purchase_screen_ps_18__approval_:
            transitioned = self.__main_region_on_disaply_purchase_screen_ps__18__approval__react(transitioned)
        elif state == self.State.main_region_on_disaply_welcome_screen:
            transitioned = self.__main_region_on_disaply_welcome_screen_react(transitioned)
        elif state == self.State.main_region_on_disaply_member_screen:
            transitioned = self.__main_region_on_disaply_member_screen_react(transitioned)
        elif state == self.State.main_region_on_disaply_help_screen:
            transitioned = self.__main_region_on_disaply_help_screen_react(transitioned)
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_please_select_payment_type_:
            transitioned = self.__main_region_on_disaply_payment_screen_pay_s__please_select_payment_type__react(
                transitioned)
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_complete_payment_in_terminal_:
            transitioned = self.__main_region_on_disaply_payment_screen_pay_s__complete_payment_in_terminal__react(
                transitioned)
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_purchase_complete__thank_you_:
            transitioned = self.__main_region_on_disaply_payment_screen_pay_s__purchase_complete__thank_you__react(
                transitioned)
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_error__please_try_again_:
            transitioned = self.__main_region_on_disaply_payment_screen_pay_s__error__please_try_again__react(
                transitioned)
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_total_price_:
            transitioned = self.__main_region_on_disaply_payment_screen_pay_s__total_price__react(transitioned)
        elif state == self.State.main_region_on_disaply_payment_screen_pay_s_total_member_price_:
            transitioned = self.__main_region_on_disaply_payment_screen_pay_s__total_member_price__react(transitioned)
        elif state == self.State.main_region_on_disaply_items_screen_items_screen_select_item:
            transitioned = self.__main_region_on_disaply_items_screen_items_screen_select_item_react(transitioned)
        elif state == self.State.main_region_on_disaply_items_screen_items_screen_item_added:
            transitioned = self.__main_region_on_disaply_items_screen_items_screen_item_added_react(transitioned)
        if self.__state_conf_vector_position < 1:
            state = self.__state_vector[1]
            if state == self.State.main_region_on_indicator_light_on_light_color_green:
                transitioned = self.__main_region_on_indicator_light_on_light_color_green_react(transitioned)
            elif state == self.State.main_region_on_indicator_light_on_light_color_red:
                transitioned = self.__main_region_on_indicator_light_on_light_color_red_react(transitioned)
        if self.__state_conf_vector_position < 2:
            state = self.__state_vector[2]
            if state == self.State.main_region_on_indicator_light_on_light_mode_steady:
                transitioned = self.__main_region_on_indicator_light_on_light_mode_steady_react(transitioned)
            elif state == self.State.main_region_on_indicator_light_on_light_mode_blinking:
                transitioned = self.__main_region_on_indicator_light_on_light_mode_blinking_react(transitioned)
        if self.__state_conf_vector_position < 3:
            state = self.__state_vector[3]
            if state == self.State.main_region_on_magnetic_stripe_card_reader_standyby:
                transitioned = self.__main_region_on_magnetic_stripe_card_reader_standyby_react(transitioned)
            elif state == self.State.main_region_on_magnetic_stripe_card_reader_read_card:
                transitioned = self.__main_region_on_magnetic_stripe_card_reader_read_card_react(transitioned)
        if self.__state_conf_vector_position < 4:
            state = self.__state_vector[4]
            if state == self.State.main_region_on_scale_standby:
                transitioned = self.__main_region_on_scale_standby_react(transitioned)
            elif state == self.State.main_region_on_scale_weigh:
                transitioned = self.__main_region_on_scale_weigh_react(transitioned)
        if self.__state_conf_vector_position < 5:
            state = self.__state_vector[5]
            if state == self.State.main_region_on_scanner_standby:
                transitioned = self.__main_region_on_scanner_standby_react(transitioned)
            elif state == self.State.main_region_on_scanner_scan:
                transitioned = self.__main_region_on_scanner_scan_react(transitioned)
        if self.__state_conf_vector_position < 6:
            state = self.__state_vector[6]
            if state == self.State.main_region_on_user_mode_guest:
                transitioned = self.__main_region_on_user_mode_guest_react(transitioned)
            elif state == self.State.main_region_on_user_mode_member:
                transitioned = self.__main_region_on_user_mode_member_react(transitioned)
        if self.__state_conf_vector_position < 7:
            state = self.__state_vector[7]
            if state == self.State.main_region_on_payment_terminal_off:
                transitioned = self.__main_region_on_payment_terminal_off_react(transitioned)
            elif state == self.State.main_region_on_payment_terminal_on_display_please_swipe_or_tap_card_:
                transitioned = self.__main_region_on_payment_terminal_on_display__please_swipe_or_tap_card__react(
                    transitioned)
            elif state == self.State.main_region_on_payment_terminal_on_display_approved_:
                transitioned = self.__main_region_on_payment_terminal_on_display__approved__react(transitioned)
            elif state == self.State.main_region_on_payment_terminal_on_display_declined_:
                transitioned = self.__main_region_on_payment_terminal_on_display__declined__react(transitioned)
            elif state == self.State.main_region_on_payment_terminal_on_display_processing:
                transitioned = self.__main_region_on_payment_terminal_on_display_processing_react(transitioned)
        if self.__state_conf_vector_position < 8:
            state = self.__state_vector[8]
            if state == self.State.main_region_on_printer_off:
                self.__main_region_on_printer_off_react(transitioned)
            elif state == self.State.main_region_on_printer_on:
                self.__main_region_on_printer_on_react(transitioned)
            elif state == self.State.main_region_on_printer_printing:
                self.__main_region_on_printer_printing_react(transitioned)

    def run_cycle(self):
        """Implementation of run_cycle function.
        """
        # Performs a 'run to completion' step.
        if self.timer_service is None:
            raise ValueError('Timer service must be set.')

        if self.__is_executing:
            return
        self.__is_executing = True
        next_event = self.__get_next_event()
        if next_event is not None:
            self.__execute_queued_event(next_event)
        condition_0 = True
        while condition_0:
            self.__micro_step()
            self.__clear_in_events()
            condition_0 = False
            next_event = self.__get_next_event()
            if next_event is not None:
                self.__execute_queued_event(next_event)
                condition_0 = True
        self.__is_executing = False

    def enter(self):
        """Implementation of enter function.
        """
        # Activates the state machine.
        if self.timer_service is None:
            raise ValueError('Timer service must be set.')

        if self.__is_executing:
            return
        self.__is_executing = True
        # Default enter sequence for statechart Statechart
        self.__enter_sequence_main_region_default()
        self.__is_executing = False

    def exit(self):
        """Implementation of exit function.
        """
        # Deactivates the state machine.
        if self.__is_executing:
            return
        self.__is_executing = True
        # Default exit sequence for statechart Statechart
        self.__exit_sequence_main_region()
        self.__is_executing = False

    def trigger_without_event(self):
        """Implementation of triggerWithoutEvent function.
        """
        self.run_cycle()

